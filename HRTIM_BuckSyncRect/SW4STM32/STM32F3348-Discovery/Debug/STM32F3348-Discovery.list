
STM32F3348-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          00000158  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000178  20000178  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014311  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022ef  00000000  00000000  00034361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c306  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000780  00000000  00000000  00042958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015d8  00000000  00000000  000430d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00021c0c  00000000  00000000  000446b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bb1d  00000000  00000000  000662bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d51e8  00000000  00000000  00071dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00146fc1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001994  00000000  00000000  00147040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f8 	.word	0x080028f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080028f8 	.word	0x080028f8

080001c8 <BSP_LED_Init>:
  *     @arg LED_ORANGE
  *     @arg LED_GREEN
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001c8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001ca:	4604      	mov	r4, r0
{
 80001cc:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 80001ce:	b330      	cbz	r0, 800021e <BSP_LED_Init+0x56>
 80001d0:	2801      	cmp	r0, #1
 80001d2:	d02f      	beq.n	8000234 <BSP_LED_Init+0x6c>
 80001d4:	2802      	cmp	r0, #2
 80001d6:	d038      	beq.n	800024a <BSP_LED_Init+0x82>
 80001d8:	2803      	cmp	r0, #3
 80001da:	d109      	bne.n	80001f0 <BSP_LED_Init+0x28>
 80001dc:	4b20      	ldr	r3, [pc, #128]	; (8000260 <BSP_LED_Init+0x98>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80001e4:	615a      	str	r2, [r3, #20]
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80001ec:	9304      	str	r3, [sp, #16]
 80001ee:	9b04      	ldr	r3, [sp, #16]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80001f0:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <BSP_LED_Init+0x9c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80001f2:	4d1d      	ldr	r5, [pc, #116]	; (8000268 <BSP_LED_Init+0xa0>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80001f4:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80001f8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80001fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000200:	2203      	movs	r2, #3
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000202:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000204:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000206:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000208:	9208      	str	r2, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800020a:	f000 fe47 	bl	8000e9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800020e:	4631      	mov	r1, r6
 8000210:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000214:	2200      	movs	r2, #0
 8000216:	f000 ff31 	bl	800107c <HAL_GPIO_WritePin>
}
 800021a:	b00a      	add	sp, #40	; 0x28
 800021c:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <BSP_LED_Init+0x98>)
 8000220:	695a      	ldr	r2, [r3, #20]
 8000222:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000226:	615a      	str	r2, [r3, #20]
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	9b01      	ldr	r3, [sp, #4]
 8000232:	e7dd      	b.n	80001f0 <BSP_LED_Init+0x28>
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <BSP_LED_Init+0x98>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800023c:	615a      	str	r2, [r3, #20]
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	9b02      	ldr	r3, [sp, #8]
 8000248:	e7d2      	b.n	80001f0 <BSP_LED_Init+0x28>
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <BSP_LED_Init+0x98>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800025a:	9303      	str	r3, [sp, #12]
 800025c:	9b03      	ldr	r3, [sp, #12]
 800025e:	e7c7      	b.n	80001f0 <BSP_LED_Init+0x28>
 8000260:	40021000 	.word	0x40021000
 8000264:	08002910 	.word	0x08002910
 8000268:	20000000 	.word	0x20000000

0800026c <BSP_LED_On>:
  *     @arg LED_GREEN
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <BSP_LED_On+0x14>)
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <BSP_LED_On+0x18>)
 8000270:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000274:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000278:	2201      	movs	r2, #1
 800027a:	f000 beff 	b.w	800107c <HAL_GPIO_WritePin>
 800027e:	bf00      	nop
 8000280:	08002910 	.word	0x08002910
 8000284:	20000000 	.word	0x20000000

08000288 <BSP_LED_Off>:
  *     @arg LED_GREEN
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <BSP_LED_Off+0x14>)
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <BSP_LED_Off+0x18>)
 800028c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000290:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000294:	2200      	movs	r2, #0
 8000296:	f000 bef1 	b.w	800107c <HAL_GPIO_WritePin>
 800029a:	bf00      	nop
 800029c:	08002910 	.word	0x08002910
 80002a0:	20000000 	.word	0x20000000

080002a4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80002a8:	b948      	cbnz	r0, 80002be <BSP_PB_Init+0x1a>
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <BSP_PB_Init+0x88>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002be:	4b1b      	ldr	r3, [pc, #108]	; (800032c <BSP_PB_Init+0x88>)
 80002c0:	699a      	ldr	r2, [r3, #24]
 80002c2:	f042 0201 	orr.w	r2, r2, #1
 80002c6:	619a      	str	r2, [r3, #24]
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	9b02      	ldr	r3, [sp, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80002d2:	b119      	cbz	r1, 80002dc <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80002d4:	2901      	cmp	r1, #1
 80002d6:	d011      	beq.n	80002fc <BSP_PB_Init+0x58>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80002d8:	b008      	add	sp, #32
 80002da:	bd10      	pop	{r4, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <BSP_PB_Init+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80002e4:	2301      	movs	r3, #1
 80002e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002e8:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002ec:	6900      	ldr	r0, [r0, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ee:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002f4:	f000 fdd2 	bl	8000e9c <HAL_GPIO_Init>
}
 80002f8:	b008      	add	sp, #32
 80002fa:	bd10      	pop	{r4, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <BSP_PB_Init+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <BSP_PB_Init+0x90>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000300:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000302:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000308:	2303      	movs	r3, #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800030a:	a903      	add	r1, sp, #12
 800030c:	6900      	ldr	r0, [r0, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8000310:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000314:	f000 fdc2 	bl	8000e9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000318:	4622      	mov	r2, r4
 800031a:	210f      	movs	r1, #15
 800031c:	2006      	movs	r0, #6
 800031e:	f000 fd61 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000322:	2006      	movs	r0, #6
 8000324:	f000 fd94 	bl	8000e50 <HAL_NVIC_EnableIRQ>
}
 8000328:	b008      	add	sp, #32
 800032a:	bd10      	pop	{r4, pc}
 800032c:	40021000 	.word	0x40021000
 8000330:	20000000 	.word	0x20000000
 8000334:	10110000 	.word	0x10110000

08000338 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000338:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <BSP_PB_GetState+0x14>)
 800033c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000340:	2101      	movs	r1, #1
 8000342:	6900      	ldr	r0, [r0, #16]
 8000344:	f000 fe94 	bl	8001070 <HAL_GPIO_ReadPin>
}
 8000348:	bd08      	pop	{r3, pc}
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000

08000350 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	4917      	ldr	r1, [pc, #92]	; (80003b0 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000354:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000356:	4819      	ldr	r0, [pc, #100]	; (80003bc <SystemInit+0x6c>)
{
 8000358:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800035e:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8000362:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000366:	681c      	ldr	r4, [r3, #0]
 8000368:	f044 0401 	orr.w	r4, r4, #1
 800036c:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00C;
 800036e:	685c      	ldr	r4, [r3, #4]
 8000370:	4022      	ands	r2, r4
 8000372:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800037a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800037e:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000386:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800038e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000392:	f022 020f 	bic.w	r2, r2, #15
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000398:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800039a:	2400      	movs	r4, #0
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800039c:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800039e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80003a2:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000;
 80003a4:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003a6:	608a      	str	r2, [r1, #8]
#endif
}
 80003a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	f87fc00c 	.word	0xf87fc00c
 80003bc:	ff00fccc 	.word	0xff00fccc

080003c0 <HAL_MspInit>:
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_InitTick+0x3c>)
 80003c8:	4d0e      	ldr	r5, [pc, #56]	; (8000404 <HAL_InitTick+0x40>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	782a      	ldrb	r2, [r5, #0]
{
 80003ce:	4606      	mov	r6, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80003d8:	fbb3 f0f0 	udiv	r0, r3, r0
 80003dc:	f000 fd44 	bl	8000e68 <HAL_SYSTICK_Config>
 80003e0:	b908      	cbnz	r0, 80003e6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	2e0f      	cmp	r6, #15
 80003e4:	d901      	bls.n	80003ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80003e6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80003e8:	bd70      	pop	{r4, r5, r6, pc}
 80003ea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ec:	4602      	mov	r2, r0
 80003ee:	4631      	mov	r1, r6
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f000 fcf6 	bl	8000de4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f8:	606e      	str	r6, [r5, #4]
 80003fa:	4620      	mov	r0, r4
 80003fc:	bd70      	pop	{r4, r5, r6, pc}
 80003fe:	bf00      	nop
 8000400:	20000014 	.word	0x20000014
 8000404:	20000018 	.word	0x20000018

08000408 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <HAL_Init+0x20>)
{
 800040a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040c:	6813      	ldr	r3, [r2, #0]
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000414:	2003      	movs	r0, #3
 8000416:	f000 fcd3 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800041a:	200f      	movs	r0, #15
 800041c:	f7ff ffd2 	bl	80003c4 <HAL_InitTick>
  HAL_MspInit();
 8000420:	f7ff ffce 	bl	80003c0 <HAL_MspInit>
}
 8000424:	2000      	movs	r0, #0
 8000426:	bd08      	pop	{r3, pc}
 8000428:	40022000 	.word	0x40022000

0800042c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <HAL_IncTick+0x10>)
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <HAL_IncTick+0x14>)
 8000430:	6811      	ldr	r1, [r2, #0]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	440b      	add	r3, r1
 8000436:	6013      	str	r3, [r2, #0]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2000003c 	.word	0x2000003c
 8000440:	20000018 	.word	0x20000018

08000444 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000444:	4b01      	ldr	r3, [pc, #4]	; (800044c <HAL_GetTick+0x8>)
 8000446:	6818      	ldr	r0, [r3, #0]
}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	2000003c 	.word	0x2000003c

08000450 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000450:	b538      	push	{r3, r4, r5, lr}
 8000452:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000454:	f7ff fff6 	bl	8000444 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000458:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800045a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800045c:	d002      	beq.n	8000464 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <HAL_Delay+0x20>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000464:	f7ff ffee 	bl	8000444 <HAL_GetTick>
 8000468:	1b40      	subs	r0, r0, r5
 800046a:	4284      	cmp	r4, r0
 800046c:	d8fa      	bhi.n	8000464 <HAL_Delay+0x14>
  {
  }
}
 800046e:	bd38      	pop	{r3, r4, r5, pc}
 8000470:	20000018 	.word	0x20000018

08000474 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000478:	2300      	movs	r3, #0
 800047a:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	2800      	cmp	r0, #0
 800047e:	f000 8099 	beq.w	80005b4 <HAL_ADC_Init+0x140>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000482:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000484:	f013 0310 	ands.w	r3, r3, #16
 8000488:	4604      	mov	r4, r0
 800048a:	d117      	bne.n	80004bc <HAL_ADC_Init+0x48>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800048c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 8083 	beq.w	800059a <HAL_ADC_Init+0x126>
 8000494:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000496:	6891      	ldr	r1, [r2, #8]
 8000498:	00c8      	lsls	r0, r1, #3
 800049a:	d572      	bpl.n	8000582 <HAL_ADC_Init+0x10e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800049c:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800049e:	0089      	lsls	r1, r1, #2
 80004a0:	d46f      	bmi.n	8000582 <HAL_ADC_Init+0x10e>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004a4:	06cf      	lsls	r7, r1, #27
 80004a6:	d400      	bmi.n	80004aa <HAL_ADC_Init+0x36>
 80004a8:	b163      	cbz	r3, 80004c4 <HAL_ADC_Init+0x50>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80004aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004ac:	f023 0312 	bic.w	r3, r3, #18
 80004b0:	f043 0310 	orr.w	r3, r3, #16
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80004b4:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80004b6:	6463      	str	r3, [r4, #68]	; 0x44
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 80004b8:	b003      	add	sp, #12
 80004ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80004be:	06db      	lsls	r3, r3, #27
 80004c0:	d4f3      	bmi.n	80004aa <HAL_ADC_Init+0x36>
 80004c2:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004c4:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004c6:	f010 0004 	ands.w	r0, r0, #4
 80004ca:	d1ee      	bne.n	80004aa <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80004cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004ce:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80004d2:	f041 0102 	orr.w	r1, r1, #2
 80004d6:	6461      	str	r1, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004d8:	6893      	ldr	r3, [r2, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004de:	f003 0303 	and.w	r3, r3, #3
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004e2:	f000 80a3 	beq.w	800062c <HAL_ADC_Init+0x1b8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004e6:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004ec:	f000 80a2 	beq.w	8000634 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004f0:	688b      	ldr	r3, [r1, #8]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d05f      	beq.n	80005ba <HAL_ADC_Init+0x146>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004fa:	4972      	ldr	r1, [pc, #456]	; (80006c4 <HAL_ADC_Init+0x250>)
 80004fc:	6865      	ldr	r5, [r4, #4]
 80004fe:	688b      	ldr	r3, [r1, #8]
 8000500:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000504:	432b      	orrs	r3, r5
 8000506:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000508:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800050a:	68e1      	ldr	r1, [r4, #12]
 800050c:	68a3      	ldr	r3, [r4, #8]
 800050e:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000510:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000512:	2f01      	cmp	r7, #1
 8000514:	ea43 0301 	orr.w	r3, r3, r1
 8000518:	bf18      	it	ne
 800051a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800051e:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000522:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000524:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000528:	d078      	beq.n	800061c <HAL_ADC_Init+0x1a8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800052a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800052c:	2b01      	cmp	r3, #1
 800052e:	d002      	beq.n	8000536 <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000530:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000532:	430b      	orrs	r3, r1
 8000534:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000536:	6893      	ldr	r3, [r2, #8]
 8000538:	f013 0f0c 	tst.w	r3, #12
 800053c:	d10b      	bne.n	8000556 <HAL_ADC_Init+0xe2>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800053e:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000542:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000544:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000548:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800054a:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800054e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000552:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000554:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000556:	68d5      	ldr	r5, [r2, #12]
 8000558:	4b5b      	ldr	r3, [pc, #364]	; (80006c8 <HAL_ADC_Init+0x254>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800055a:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800055c:	402b      	ands	r3, r5
 800055e:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000560:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000562:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000564:	d06b      	beq.n	800063e <HAL_ADC_Init+0x1ca>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000566:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000568:	f023 030f 	bic.w	r3, r3, #15
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800056e:	2000      	movs	r0, #0
 8000570:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000572:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000574:	f023 0303 	bic.w	r3, r3, #3
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800057e:	b003      	add	sp, #12
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8000582:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000584:	f023 0312 	bic.w	r3, r3, #18
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800058e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000596:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000598:	e787      	b.n	80004aa <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 800059a:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800059c:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800059e:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80005a0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80005a4:	f002 f916 	bl	80027d4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80005a8:	6822      	ldr	r2, [r4, #0]
 80005aa:	6893      	ldr	r3, [r2, #8]
 80005ac:	00df      	lsls	r7, r3, #3
 80005ae:	d508      	bpl.n	80005c2 <HAL_ADC_Init+0x14e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e770      	b.n	8000496 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80005b4:	2001      	movs	r0, #1
}
 80005b6:	b003      	add	sp, #12
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005ba:	680b      	ldr	r3, [r1, #0]
 80005bc:	07dd      	lsls	r5, r3, #31
 80005be:	d4a3      	bmi.n	8000508 <HAL_ADC_Init+0x94>
 80005c0:	e79b      	b.n	80004fa <HAL_ADC_Init+0x86>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80005c2:	6893      	ldr	r3, [r2, #8]
 80005c4:	f003 0303 	and.w	r3, r3, #3
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d04b      	beq.n	8000664 <HAL_ADC_Init+0x1f0>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005ce:	06dd      	lsls	r5, r3, #27
 80005d0:	d4ee      	bmi.n	80005b0 <HAL_ADC_Init+0x13c>
          ADC_STATE_CLR_SET(hadc->State,
 80005d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <HAL_ADC_Init+0x258>)
 80005d6:	483e      	ldr	r0, [pc, #248]	; (80006d0 <HAL_ADC_Init+0x25c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80005da:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80005de:	f021 0102 	bic.w	r1, r1, #2
 80005e2:	f041 0102 	orr.w	r1, r1, #2
 80005e6:	6461      	str	r1, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005e8:	6891      	ldr	r1, [r2, #8]
 80005ea:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80005ee:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005f0:	fba0 1303 	umull	r1, r3, r0, r3
 80005f4:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005f6:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005fc:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005fe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000602:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000604:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f43f af44 	beq.w	8000496 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800060e:	9b01      	ldr	r3, [sp, #4]
 8000610:	3b01      	subs	r3, #1
 8000612:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000614:	9b01      	ldr	r3, [sp, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f9      	bne.n	800060e <HAL_ADC_Init+0x19a>
 800061a:	e73c      	b.n	8000496 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800061c:	b9be      	cbnz	r6, 800064e <HAL_ADC_Init+0x1da>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800061e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000620:	3b01      	subs	r3, #1
 8000622:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 8000626:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 800062a:	e77e      	b.n	800052a <HAL_ADC_Init+0xb6>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800062c:	2b01      	cmp	r3, #1
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800062e:	4929      	ldr	r1, [pc, #164]	; (80006d4 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000630:	f47f af5e 	bne.w	80004f0 <HAL_ADC_Init+0x7c>
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	07de      	lsls	r6, r3, #31
 8000638:	f53f af66 	bmi.w	8000508 <HAL_ADC_Init+0x94>
 800063c:	e758      	b.n	80004f0 <HAL_ADC_Init+0x7c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800063e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000640:	6a23      	ldr	r3, [r4, #32]
 8000642:	f021 010f 	bic.w	r1, r1, #15
 8000646:	3b01      	subs	r3, #1
 8000648:	430b      	orrs	r3, r1
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	e78f      	b.n	800056e <HAL_ADC_Init+0xfa>
        ADC_STATE_CLR_SET(hadc->State,
 800064e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000650:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64a3      	str	r3, [r4, #72]	; 0x48
 8000662:	e762      	b.n	800052a <HAL_ADC_Init+0xb6>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000664:	6813      	ldr	r3, [r2, #0]
 8000666:	07de      	lsls	r6, r3, #31
 8000668:	d5b0      	bpl.n	80005cc <HAL_ADC_Init+0x158>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800066a:	6893      	ldr	r3, [r2, #8]
 800066c:	f003 030d 	and.w	r3, r3, #13
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <HAL_ADC_Init+0x216>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000674:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800067c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000684:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000686:	2301      	movs	r3, #1
 8000688:	e705      	b.n	8000496 <HAL_ADC_Init+0x22>
      __HAL_ADC_DISABLE(hadc);
 800068a:	6893      	ldr	r3, [r2, #8]
 800068c:	2103      	movs	r1, #3
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6093      	str	r3, [r2, #8]
 8000694:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000696:	f7ff fed5 	bl	8000444 <HAL_GetTick>
 800069a:	4605      	mov	r5, r0
 800069c:	e004      	b.n	80006a8 <HAL_ADC_Init+0x234>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800069e:	f7ff fed1 	bl	8000444 <HAL_GetTick>
 80006a2:	1b40      	subs	r0, r0, r5
 80006a4:	2802      	cmp	r0, #2
 80006a6:	d809      	bhi.n	80006bc <HAL_ADC_Init+0x248>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80006a8:	6822      	ldr	r2, [r4, #0]
 80006aa:	6893      	ldr	r3, [r2, #8]
 80006ac:	f013 0301 	ands.w	r3, r3, #1
 80006b0:	d1f5      	bne.n	800069e <HAL_ADC_Init+0x22a>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80006b4:	06c9      	lsls	r1, r1, #27
 80006b6:	f53f aeee 	bmi.w	8000496 <HAL_ADC_Init+0x22>
 80006ba:	e78a      	b.n	80005d2 <HAL_ADC_Init+0x15e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006be:	6822      	ldr	r2, [r4, #0]
 80006c0:	e7d9      	b.n	8000676 <HAL_ADC_Init+0x202>
 80006c2:	bf00      	nop
 80006c4:	50000300 	.word	0x50000300
 80006c8:	fff0c007 	.word	0xfff0c007
 80006cc:	20000014 	.word	0x20000014
 80006d0:	431bde83 	.word	0x431bde83
 80006d4:	50000100 	.word	0x50000100

080006d8 <HAL_ADCEx_Calibration_Start>:
  __HAL_LOCK(hadc);
 80006d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d101      	bne.n	80006e4 <HAL_ADCEx_Calibration_Start+0xc>
 80006e0:	2002      	movs	r0, #2
 80006e2:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) != RESET )
 80006e4:	6803      	ldr	r3, [r0, #0]
{
 80006e6:	b570      	push	{r4, r5, r6, lr}
 80006e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80006ea:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 80006ec:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 80006ee:	f000 0003 	and.w	r0, r0, #3
 80006f2:	4290      	cmp	r0, r2
 80006f4:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80006f6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 80006fa:	d023      	beq.n	8000744 <HAL_ADCEx_Calibration_Start+0x6c>
    hadc->State = HAL_ADC_STATE_READY;
 80006fc:	2201      	movs	r2, #1
 80006fe:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000700:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000702:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000704:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000708:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800070a:	d03a      	beq.n	8000782 <HAL_ADCEx_Calibration_Start+0xaa>
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000712:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000714:	f7ff fe96 	bl	8000444 <HAL_GetTick>
 8000718:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800071a:	e004      	b.n	8000726 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800071c:	f7ff fe92 	bl	8000444 <HAL_GetTick>
 8000720:	1b40      	subs	r0, r0, r5
 8000722:	280a      	cmp	r0, #10
 8000724:	d822      	bhi.n	800076c <HAL_ADCEx_Calibration_Start+0x94>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	dbf6      	blt.n	800071c <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800072e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000730:	f023 0303 	bic.w	r3, r3, #3
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6463      	str	r3, [r4, #68]	; 0x44
 800073a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800073c:	2300      	movs	r3, #0
 800073e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000742:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	07d1      	lsls	r1, r2, #31
 8000748:	d5d8      	bpl.n	80006fc <HAL_ADCEx_Calibration_Start+0x24>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	f002 020d 	and.w	r2, r2, #13
 8000750:	2a01      	cmp	r2, #1
 8000752:	d01b      	beq.n	800078c <HAL_ADCEx_Calibration_Start+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000754:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800075c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 8000764:	2300      	movs	r3, #0
 8000766:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 800076a:	bd70      	pop	{r4, r5, r6, pc}
        ADC_STATE_CLR_SET(hadc->State,
 800076c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800076e:	f023 0312 	bic.w	r3, r3, #18
 8000772:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8000776:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8000778:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800077a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800077e:	2001      	movs	r0, #1
 8000780:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	e7bf      	b.n	800070c <HAL_ADCEx_Calibration_Start+0x34>
      __HAL_ADC_DISABLE(hadc);
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	2103      	movs	r1, #3
 8000790:	f042 0202 	orr.w	r2, r2, #2
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8000798:	f7ff fe54 	bl	8000444 <HAL_GetTick>
 800079c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	07d2      	lsls	r2, r2, #31
 80007a4:	d5aa      	bpl.n	80006fc <HAL_ADCEx_Calibration_Start+0x24>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80007a6:	f7ff fe4d 	bl	8000444 <HAL_GetTick>
 80007aa:	1b80      	subs	r0, r0, r6
 80007ac:	2802      	cmp	r0, #2
 80007ae:	d9f6      	bls.n	800079e <HAL_ADCEx_Calibration_Start+0xc6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	64a3      	str	r3, [r4, #72]	; 0x48
 80007c0:	2001      	movs	r0, #1
 80007c2:	e7bb      	b.n	800073c <HAL_ADCEx_Calibration_Start+0x64>

080007c4 <HAL_ADCEx_InjectedStart>:
{
 80007c4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80007c6:	6803      	ldr	r3, [r0, #0]
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	0714      	lsls	r4, r2, #28
 80007cc:	d501      	bpl.n	80007d2 <HAL_ADCEx_InjectedStart+0xe>
    tmp_hal_status = HAL_BUSY;
 80007ce:	2002      	movs	r0, #2
 80007d0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80007d2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80007d6:	2a01      	cmp	r2, #1
 80007d8:	d0f9      	beq.n	80007ce <HAL_ADCEx_InjectedStart+0xa>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007da:	689a      	ldr	r2, [r3, #8]
    __HAL_LOCK(hadc);
 80007dc:	2101      	movs	r1, #1
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007de:	f002 0203 	and.w	r2, r2, #3
 80007e2:	428a      	cmp	r2, r1
 80007e4:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80007e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007ea:	d010      	beq.n	800080e <HAL_ADCEx_InjectedStart+0x4a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80007ec:	6899      	ldr	r1, [r3, #8]
 80007ee:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <HAL_ADCEx_InjectedStart+0xf0>)
 80007f0:	4211      	tst	r1, r2
 80007f2:	d048      	beq.n	8000886 <HAL_ADCEx_InjectedStart+0xc2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000804:	2300      	movs	r3, #0
 8000806:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800080a:	2001      	movs	r0, #1
}
 800080c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	07d0      	lsls	r0, r2, #31
 8000812:	d5eb      	bpl.n	80007ec <HAL_ADCEx_InjectedStart+0x28>
      ADC_STATE_CLR_SET(hadc->State,
 8000814:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000816:	4928      	ldr	r1, [pc, #160]	; (80008b8 <HAL_ADCEx_InjectedStart+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 8000818:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800081c:	f022 0201 	bic.w	r2, r2, #1
 8000820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000824:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000826:	688a      	ldr	r2, [r1, #8]
 8000828:	f012 0f1f 	tst.w	r2, #31
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800082c:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800082e:	d026      	beq.n	800087e <HAL_ADCEx_InjectedStart+0xba>
 8000830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000834:	d023      	beq.n	800087e <HAL_ADCEx_InjectedStart+0xba>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000836:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800083a:	6462      	str	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800083c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800083e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 8000842:	bf08      	it	eq
 8000844:	64a2      	streq	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000846:	2000      	movs	r0, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8000848:	2260      	movs	r2, #96	; 0x60
      __HAL_UNLOCK(hadc);
 800084a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800084e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8000856:	d1d9      	bne.n	800080c <HAL_ADCEx_InjectedStart+0x48>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8000858:	4917      	ldr	r1, [pc, #92]	; (80008b8 <HAL_ADCEx_InjectedStart+0xf4>)
 800085a:	6888      	ldr	r0, [r1, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800085c:	06c2      	lsls	r2, r0, #27
 800085e:	d024      	beq.n	80008aa <HAL_ADCEx_InjectedStart+0xe6>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8000860:	6888      	ldr	r0, [r1, #8]
 8000862:	f000 001f 	and.w	r0, r0, #31
 8000866:	2806      	cmp	r0, #6
 8000868:	d01f      	beq.n	80008aa <HAL_ADCEx_InjectedStart+0xe6>
 800086a:	6889      	ldr	r1, [r1, #8]
 800086c:	f001 011f 	and.w	r1, r1, #31
 8000870:	2907      	cmp	r1, #7
 8000872:	d01a      	beq.n	80008aa <HAL_ADCEx_InjectedStart+0xe6>
 8000874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000878:	d017      	beq.n	80008aa <HAL_ADCEx_InjectedStart+0xe6>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 800087a:	2000      	movs	r0, #0
 800087c:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800087e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000882:	6462      	str	r2, [r4, #68]	; 0x44
 8000884:	e7da      	b.n	800083c <HAL_ADCEx_InjectedStart+0x78>
    __HAL_ADC_ENABLE(hadc);
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	f042 0201 	orr.w	r2, r2, #1
 800088c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800088e:	f7ff fdd9 	bl	8000444 <HAL_GetTick>
 8000892:	4605      	mov	r5, r0
 8000894:	e004      	b.n	80008a0 <HAL_ADCEx_InjectedStart+0xdc>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000896:	f7ff fdd5 	bl	8000444 <HAL_GetTick>
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	2802      	cmp	r0, #2
 800089e:	d8a9      	bhi.n	80007f4 <HAL_ADCEx_InjectedStart+0x30>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	07d1      	lsls	r1, r2, #31
 80008a6:	d5f6      	bpl.n	8000896 <HAL_ADCEx_InjectedStart+0xd2>
 80008a8:	e7b4      	b.n	8000814 <HAL_ADCEx_InjectedStart+0x50>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	f042 0208 	orr.w	r2, r2, #8
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	e7e2      	b.n	800087a <HAL_ADCEx_InjectedStart+0xb6>
 80008b4:	8000003f 	.word	0x8000003f
 80008b8:	50000300 	.word	0x50000300

080008bc <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 80008bc:	2903      	cmp	r1, #3
 80008be:	d00f      	beq.n	80008e0 <HAL_ADCEx_InjectedGetValue+0x24>
 80008c0:	2904      	cmp	r1, #4
 80008c2:	d009      	beq.n	80008d8 <HAL_ADCEx_InjectedGetValue+0x1c>
 80008c4:	2902      	cmp	r1, #2
 80008c6:	d003      	beq.n	80008d0 <HAL_ADCEx_InjectedGetValue+0x14>
      tmp_jdr = hadc->Instance->JDR1;
 80008c8:	6803      	ldr	r3, [r0, #0]
 80008ca:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80008ce:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 80008d0:	6803      	ldr	r3, [r0, #0]
 80008d2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 80008d6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80008d8:	6803      	ldr	r3, [r0, #0]
 80008da:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 80008de:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80008e0:	6803      	ldr	r3, [r0, #0]
 80008e2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 80008e6:	4770      	bx	lr

080008e8 <HAL_ADCEx_InjectedConfigChannel>:
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	4602      	mov	r2, r0
 80008ec:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80008ee:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 80008f2:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80008f4:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80008f6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80008f8:	f000 809e 	beq.w	8000a38 <HAL_ADCEx_InjectedConfigChannel+0x150>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008fc:	6913      	ldr	r3, [r2, #16]
  __HAL_LOCK(hadc);
 80008fe:	2001      	movs	r0, #1
 8000900:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14a      	bne.n	800099e <HAL_ADCEx_InjectedConfigChannel+0xb6>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8000908:	684b      	ldr	r3, [r1, #4]
 800090a:	2b01      	cmp	r3, #1
 800090c:	f000 8129 	beq.w	8000b62 <HAL_ADCEx_InjectedConfigChannel+0x27a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000910:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f040 0020 	orr.w	r0, r0, #32
 8000918:	6450      	str	r0, [r2, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800091a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800091c:	689c      	ldr	r4, [r3, #8]
 800091e:	0727      	lsls	r7, r4, #28
 8000920:	d40d      	bmi.n	800093e <HAL_ADCEx_InjectedConfigChannel+0x56>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8000922:	6a0c      	ldr	r4, [r1, #32]
 8000924:	2c00      	cmp	r4, #0
 8000926:	f040 8099 	bne.w	8000a5c <HAL_ADCEx_InjectedConfigChannel+0x174>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800092a:	69cc      	ldr	r4, [r1, #28]
 800092c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800092e:	68dd      	ldr	r5, [r3, #12]
 8000930:	0524      	lsls	r4, r4, #20
 8000932:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8000936:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800093a:	432c      	orrs	r4, r5
 800093c:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800093e:	689c      	ldr	r4, [r3, #8]
 8000940:	f014 0f0c 	tst.w	r4, #12
 8000944:	d158      	bne.n	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8000946:	6a8c      	ldr	r4, [r1, #40]	; 0x28
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8000948:	6a0d      	ldr	r5, [r1, #32]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800094a:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800094c:	68dc      	ldr	r4, [r3, #12]
 800094e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8000952:	f000 8132 	beq.w	8000bba <HAL_ADCEx_InjectedConfigChannel+0x2d2>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8000956:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8000958:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800095a:	f000 80f7 	beq.w	8000b4c <HAL_ADCEx_InjectedConfigChannel+0x264>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800095e:	680c      	ldr	r4, [r1, #0]
 8000960:	2c09      	cmp	r4, #9
 8000962:	d86c      	bhi.n	8000a3e <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8000964:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8000968:	695d      	ldr	r5, [r3, #20]
 800096a:	688e      	ldr	r6, [r1, #8]
 800096c:	2707      	movs	r7, #7
 800096e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000972:	ea25 0507 	bic.w	r5, r5, r7
 8000976:	fa06 f60e 	lsl.w	r6, r6, lr
 800097a:	4335      	orrs	r5, r6
 800097c:	615d      	str	r5, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800097e:	68dd      	ldr	r5, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8000980:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8000982:	694f      	ldr	r7, [r1, #20]
 8000984:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8000988:	006d      	lsls	r5, r5, #1
    switch (sConfigInjected->InjectedOffsetNumber)
 800098a:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800098c:	fa07 f505 	lsl.w	r5, r7, r5
    switch (sConfigInjected->InjectedOffsetNumber)
 8000990:	2e03      	cmp	r6, #3
 8000992:	f200 811c 	bhi.w	8000bce <HAL_ADCEx_InjectedConfigChannel+0x2e6>
 8000996:	e8df f006 	tbb	[pc, r6]
 800099a:	bcc8      	.short	0xbcc8
 800099c:	b024      	.short	0xb024
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800099e:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80009a0:	4284      	cmp	r4, r0
 80009a2:	d0b1      	beq.n	8000908 <HAL_ADCEx_InjectedConfigChannel+0x20>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80009a4:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d169      	bne.n	8000a7e <HAL_ADCEx_InjectedConfigChannel+0x196>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80009aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80009ac:	6514      	str	r4, [r2, #80]	; 0x50
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80009ae:	2b01      	cmp	r3, #1
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80009b0:	64d0      	str	r0, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80009b2:	f000 8158 	beq.w	8000c66 <HAL_ADCEx_InjectedConfigChannel+0x37e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80009b6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80009b8:	3c01      	subs	r4, #1
 80009ba:	4303      	orrs	r3, r0
 80009bc:	4323      	orrs	r3, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80009be:	684d      	ldr	r5, [r1, #4]
 80009c0:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 80009c2:	6514      	str	r4, [r2, #80]	; 0x50
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80009c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009c8:	0068      	lsls	r0, r5, #1
 80009ca:	3002      	adds	r0, #2
 80009cc:	241f      	movs	r4, #31
 80009ce:	4084      	lsls	r4, r0
 80009d0:	ea23 0304 	bic.w	r3, r3, r4
 80009d4:	fa06 f000 	lsl.w	r0, r6, r0
 80009d8:	4303      	orrs	r3, r0
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009dc:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009de:	2000      	movs	r0, #0
 80009e0:	e79c      	b.n	800091c <HAL_ADCEx_InjectedConfigChannel+0x34>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80009e2:	f8d3 e068 	ldr.w	lr, [r3, #104]	; 0x68
 80009e6:	4eb7      	ldr	r6, [pc, #732]	; (8000cc4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80009e8:	06a7      	lsls	r7, r4, #26
 80009ea:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80009ee:	ea0e 0606 	and.w	r6, lr, r6
 80009f2:	4337      	orrs	r7, r6
 80009f4:	433d      	orrs	r5, r7
 80009f6:	669d      	str	r5, [r3, #104]	; 0x68
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009f8:	689c      	ldr	r4, [r3, #8]
 80009fa:	f004 0403 	and.w	r4, r4, #3
 80009fe:	2c01      	cmp	r4, #1
 8000a00:	f000 80aa 	beq.w	8000b58 <HAL_ADCEx_InjectedConfigChannel+0x270>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000a04:	68cd      	ldr	r5, [r1, #12]
 8000a06:	2d01      	cmp	r5, #1
 8000a08:	f000 80bd 	beq.w	8000b86 <HAL_ADCEx_InjectedConfigChannel+0x29e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8000a0c:	680c      	ldr	r4, [r1, #0]
 8000a0e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000a12:	2501      	movs	r5, #1
 8000a14:	40a5      	lsls	r5, r4
 8000a16:	ea21 0105 	bic.w	r1, r1, r5
 8000a1a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a1e:	2c10      	cmp	r4, #16
 8000a20:	d047      	beq.n	8000ab2 <HAL_ADCEx_InjectedConfigChannel+0x1ca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a22:	2c11      	cmp	r4, #17
 8000a24:	f000 808d 	beq.w	8000b42 <HAL_ADCEx_InjectedConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a28:	2c12      	cmp	r4, #18
 8000a2a:	f000 80ca 	beq.w	8000bc2 <HAL_ADCEx_InjectedConfigChannel+0x2da>
  __HAL_UNLOCK(hadc);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8000a34:	b003      	add	sp, #12
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8000a38:	2002      	movs	r0, #2
}
 8000a3a:	b003      	add	sp, #12
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8000a3e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8000a42:	3f1e      	subs	r7, #30
 8000a44:	699d      	ldr	r5, [r3, #24]
 8000a46:	688e      	ldr	r6, [r1, #8]
 8000a48:	f04f 0e07 	mov.w	lr, #7
 8000a4c:	fa0e fe07 	lsl.w	lr, lr, r7
 8000a50:	ea25 050e 	bic.w	r5, r5, lr
 8000a54:	40be      	lsls	r6, r7
 8000a56:	4335      	orrs	r5, r6
 8000a58:	619d      	str	r5, [r3, #24]
 8000a5a:	e790      	b.n	800097e <HAL_ADCEx_InjectedConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8000a5c:	68dc      	ldr	r4, [r3, #12]
 8000a5e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000a60:	69cd      	ldr	r5, [r1, #28]
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8000a62:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8000a66:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000a6a:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8000a6c:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000a6e:	f47f af66 	bne.w	800093e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a72:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000a74:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8000a78:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a7a:	6454      	str	r4, [r2, #68]	; 0x44
 8000a7c:	e75f      	b.n	800093e <HAL_ADCEx_InjectedConfigChannel+0x56>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8000a7e:	684b      	ldr	r3, [r1, #4]
 8000a80:	680e      	ldr	r6, [r1, #0]
 8000a82:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8000a84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	241f      	movs	r4, #31
 8000a8e:	409c      	lsls	r4, r3
 8000a90:	ea25 0504 	bic.w	r5, r5, r4
 8000a94:	fa06 f303 	lsl.w	r3, r6, r3
 8000a98:	3801      	subs	r0, #1
 8000a9a:	431d      	orrs	r5, r3
 8000a9c:	64d5      	str	r5, [r2, #76]	; 0x4c
      hadc->InjectionConfig.ChannelCount --;
 8000a9e:	6510      	str	r0, [r2, #80]	; 0x50
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d19b      	bne.n	80009dc <HAL_ADCEx_InjectedConfigChannel+0xf4>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	4c88      	ldr	r4, [pc, #544]	; (8000cc8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8000aa8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8000aaa:	4026      	ands	r6, r4
 8000aac:	4335      	orrs	r5, r6
 8000aae:	64dd      	str	r5, [r3, #76]	; 0x4c
 8000ab0:	e734      	b.n	800091c <HAL_ADCEx_InjectedConfigChannel+0x34>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ab2:	4986      	ldr	r1, [pc, #536]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8000ab4:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ab6:	020d      	lsls	r5, r1, #8
 8000ab8:	d4b9      	bmi.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000aba:	6899      	ldr	r1, [r3, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ac0:	f001 0103 	and.w	r1, r1, #3
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ac4:	f000 80c7 	beq.w	8000c56 <HAL_ADCEx_InjectedConfigChannel+0x36e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ac8:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aca:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ace:	f000 80c6 	beq.w	8000c5e <HAL_ADCEx_InjectedConfigChannel+0x376>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ad2:	68a9      	ldr	r1, [r5, #8]
 8000ad4:	f001 0103 	and.w	r1, r1, #3
 8000ad8:	2901      	cmp	r1, #1
 8000ada:	f000 80b2 	beq.w	8000c42 <HAL_ADCEx_InjectedConfigChannel+0x35a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ade:	2c10      	cmp	r4, #16
 8000ae0:	f000 80c7 	beq.w	8000c72 <HAL_ADCEx_InjectedConfigChannel+0x38a>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000ae4:	2c11      	cmp	r4, #17
 8000ae6:	f000 80e2 	beq.w	8000cae <HAL_ADCEx_InjectedConfigChannel+0x3c6>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8000aea:	2c12      	cmp	r4, #18
 8000aec:	d19f      	bne.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000aee:	4977      	ldr	r1, [pc, #476]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8000af0:	688b      	ldr	r3, [r1, #8]
 8000af2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af6:	608b      	str	r3, [r1, #8]
 8000af8:	e799      	b.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8000afa:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8000afe:	4e71      	ldr	r6, [pc, #452]	; (8000cc4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8000b00:	06a7      	lsls	r7, r4, #26
 8000b02:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000b06:	ea0e 0606 	and.w	r6, lr, r6
 8000b0a:	4337      	orrs	r7, r6
 8000b0c:	433d      	orrs	r5, r7
 8000b0e:	66dd      	str	r5, [r3, #108]	; 0x6c
      break;
 8000b10:	e772      	b.n	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8000b12:	f8d3 e064 	ldr.w	lr, [r3, #100]	; 0x64
 8000b16:	4e6b      	ldr	r6, [pc, #428]	; (8000cc4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8000b18:	06a7      	lsls	r7, r4, #26
 8000b1a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000b1e:	ea0e 0606 	and.w	r6, lr, r6
 8000b22:	4337      	orrs	r7, r6
 8000b24:	433d      	orrs	r5, r7
 8000b26:	665d      	str	r5, [r3, #100]	; 0x64
      break;
 8000b28:	e766      	b.n	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8000b2a:	f8d3 e060 	ldr.w	lr, [r3, #96]	; 0x60
 8000b2e:	4e65      	ldr	r6, [pc, #404]	; (8000cc4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8000b30:	06a7      	lsls	r7, r4, #26
 8000b32:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000b36:	ea0e 0606 	and.w	r6, lr, r6
 8000b3a:	4337      	orrs	r7, r6
 8000b3c:	433d      	orrs	r5, r7
 8000b3e:	661d      	str	r5, [r3, #96]	; 0x60
      break;
 8000b40:	e75a      	b.n	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b42:	4962      	ldr	r1, [pc, #392]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8000b44:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8000b46:	01c9      	lsls	r1, r1, #7
 8000b48:	d5b7      	bpl.n	8000aba <HAL_ADCEx_InjectedConfigChannel+0x1d2>
 8000b4a:	e770      	b.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b4e:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8000b52:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b54:	6454      	str	r4, [r2, #68]	; 0x44
 8000b56:	e702      	b.n	800095e <HAL_ADCEx_InjectedConfigChannel+0x76>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b58:	681c      	ldr	r4, [r3, #0]
 8000b5a:	07e6      	lsls	r6, r4, #31
 8000b5c:	f53f af67 	bmi.w	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
 8000b60:	e750      	b.n	8000a04 <HAL_ADCEx_InjectedConfigChannel+0x11c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8000b62:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	f000 8081 	beq.w	8000c6c <HAL_ADCEx_InjectedConfigChannel+0x384>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8000b6a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000b6c:	680c      	ldr	r4, [r1, #0]
 8000b6e:	4303      	orrs	r3, r0
 8000b70:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 8000b74:	6813      	ldr	r3, [r2, #0]
 8000b76:	4d54      	ldr	r5, [pc, #336]	; (8000cc8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8000b78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000b7a:	4028      	ands	r0, r5
 8000b7c:	4320      	orrs	r0, r4
 8000b7e:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2000      	movs	r0, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8000b82:	64d4      	str	r4, [r2, #76]	; 0x4c
 8000b84:	e6ca      	b.n	800091c <HAL_ADCEx_InjectedConfigChannel+0x34>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8000b86:	680c      	ldr	r4, [r1, #0]
 8000b88:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8000b8c:	40a5      	lsls	r5, r4
 8000b8e:	4335      	orrs	r5, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8000b90:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8000b92:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8000b96:	d935      	bls.n	8000c04 <HAL_ADCEx_InjectedConfigChannel+0x31c>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000b98:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000b9c:	688f      	ldr	r7, [r1, #8]
 8000b9e:	699e      	ldr	r6, [r3, #24]
 8000ba0:	f1a5 011b 	sub.w	r1, r5, #27
 8000ba4:	f04f 0e07 	mov.w	lr, #7
 8000ba8:	fa0e fe01 	lsl.w	lr, lr, r1
 8000bac:	fa07 f501 	lsl.w	r5, r7, r1
 8000bb0:	ea26 010e 	bic.w	r1, r6, lr
 8000bb4:	4329      	orrs	r1, r5
 8000bb6:	6199      	str	r1, [r3, #24]
 8000bb8:	e731      	b.n	8000a1e <HAL_ADCEx_InjectedConfigChannel+0x136>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8000bba:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 8000bbe:	60dc      	str	r4, [r3, #12]
 8000bc0:	e6cd      	b.n	800095e <HAL_ADCEx_InjectedConfigChannel+0x76>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000bc2:	4942      	ldr	r1, [pc, #264]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8000bc4:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8000bc6:	024f      	lsls	r7, r1, #9
 8000bc8:	f53f af31 	bmi.w	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
 8000bcc:	e775      	b.n	8000aba <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8000bce:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8000bd0:	06a4      	lsls	r4, r4, #26
 8000bd2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	d02e      	beq.n	8000c38 <HAL_ADCEx_InjectedConfigChannel+0x350>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8000bda:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8000bdc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000be0:	42ac      	cmp	r4, r5
 8000be2:	d024      	beq.n	8000c2e <HAL_ADCEx_InjectedConfigChannel+0x346>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8000be4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000be6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000bea:	42ac      	cmp	r4, r5
 8000bec:	d01a      	beq.n	8000c24 <HAL_ADCEx_InjectedConfigChannel+0x33c>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8000bee:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000bf0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000bf4:	42ac      	cmp	r4, r5
 8000bf6:	f47f aeff 	bne.w	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000bfa:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8000bfc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000c00:	66dc      	str	r4, [r3, #108]	; 0x6c
 8000c02:	e6f9      	b.n	80009f8 <HAL_ADCEx_InjectedConfigChannel+0x110>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000c04:	1c65      	adds	r5, r4, #1
 8000c06:	688f      	ldr	r7, [r1, #8]
 8000c08:	695e      	ldr	r6, [r3, #20]
 8000c0a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8000c0e:	f04f 0e07 	mov.w	lr, #7
 8000c12:	fa0e fe01 	lsl.w	lr, lr, r1
 8000c16:	fa07 f501 	lsl.w	r5, r7, r1
 8000c1a:	ea26 010e 	bic.w	r1, r6, lr
 8000c1e:	4329      	orrs	r1, r5
 8000c20:	6159      	str	r1, [r3, #20]
 8000c22:	e6fe      	b.n	8000a22 <HAL_ADCEx_InjectedConfigChannel+0x13a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000c24:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000c26:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8000c2a:	669d      	str	r5, [r3, #104]	; 0x68
 8000c2c:	e7df      	b.n	8000bee <HAL_ADCEx_InjectedConfigChannel+0x306>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000c2e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8000c30:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8000c34:	665d      	str	r5, [r3, #100]	; 0x64
 8000c36:	e7d5      	b.n	8000be4 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000c38:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8000c3a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8000c3e:	661d      	str	r5, [r3, #96]	; 0x60
 8000c40:	e7cb      	b.n	8000bda <HAL_ADCEx_InjectedConfigChannel+0x2f2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c42:	6829      	ldr	r1, [r5, #0]
 8000c44:	07c9      	lsls	r1, r1, #31
 8000c46:	f57f af4a 	bpl.w	8000ade <HAL_ADCEx_InjectedConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e6eb      	b.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c56:	2901      	cmp	r1, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c58:	4d1d      	ldr	r5, [pc, #116]	; (8000cd0 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c5a:	f47f af3a 	bne.w	8000ad2 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	07ce      	lsls	r6, r1, #31
 8000c62:	d4f2      	bmi.n	8000c4a <HAL_ADCEx_InjectedConfigChannel+0x362>
 8000c64:	e735      	b.n	8000ad2 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8000c66:	1e63      	subs	r3, r4, #1
 8000c68:	461c      	mov	r4, r3
 8000c6a:	e6a8      	b.n	80009be <HAL_ADCEx_InjectedConfigChannel+0xd6>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8000c6c:	680c      	ldr	r4, [r1, #0]
 8000c6e:	0224      	lsls	r4, r4, #8
 8000c70:	e780      	b.n	8000b74 <HAL_ADCEx_InjectedConfigChannel+0x28c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c76:	f47f aeda 	bne.w	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000c7a:	4914      	ldr	r1, [pc, #80]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c7c:	4d15      	ldr	r5, [pc, #84]	; (8000cd4 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000c7e:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c80:	4c15      	ldr	r4, [pc, #84]	; (8000cd8 <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000c82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c86:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	fba4 1303 	umull	r1, r3, r4, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000c98:	9b01      	ldr	r3, [sp, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f43f aec7 	beq.w	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
            wait_loop_index--;
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000ca6:	9b01      	ldr	r3, [sp, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f9      	bne.n	8000ca0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
 8000cac:	e6bf      	b.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb2:	f47f aebc 	bne.w	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000cb6:	4905      	ldr	r1, [pc, #20]	; (8000ccc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8000cb8:	688b      	ldr	r3, [r1, #8]
 8000cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cbe:	608b      	str	r3, [r1, #8]
 8000cc0:	e6b5      	b.n	8000a2e <HAL_ADCEx_InjectedConfigChannel+0x146>
 8000cc2:	bf00      	nop
 8000cc4:	83fff000 	.word	0x83fff000
 8000cc8:	82082000 	.word	0x82082000
 8000ccc:	50000300 	.word	0x50000300
 8000cd0:	50000100 	.word	0x50000100
 8000cd4:	20000014 	.word	0x20000014
 8000cd8:	431bde83 	.word	0x431bde83

08000cdc <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ce0:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8000ce2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ce6:	4834      	ldr	r0, [pc, #208]	; (8000db8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8000ce8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000cec:	bf18      	it	ne
 8000cee:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d036      	beq.n	8000d64 <HAL_ADCEx_MultiModeConfigChannel+0x88>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000cf6:	68a2      	ldr	r2, [r4, #8]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000cf8:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8000cfa:	2501      	movs	r5, #1
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000cfc:	0757      	lsls	r7, r2, #29
  __HAL_LOCK(hadc);
 8000cfe:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000d02:	d508      	bpl.n	8000d16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d06:	f042 0220 	orr.w	r2, r2, #32
 8000d0a:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return tmp_hal_status;
 8000d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000d16:	6882      	ldr	r2, [r0, #8]
 8000d18:	0755      	lsls	r5, r2, #29
 8000d1a:	d4f3      	bmi.n	8000d04 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000d1c:	b326      	cbz	r6, 8000d68 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000d1e:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8000dbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8000d22:	684f      	ldr	r7, [r1, #4]
 8000d24:	f8de 5008 	ldr.w	r5, [lr, #8]
 8000d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2a:	f425 4560 	bic.w	r5, r5, #57344	; 0xe000
 8000d2e:	ea47 3242 	orr.w	r2, r7, r2, lsl #13
 8000d32:	432a      	orrs	r2, r5
 8000d34:	f8ce 2008 	str.w	r2, [lr, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d38:	68a2      	ldr	r2, [r4, #8]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	2a01      	cmp	r2, #1
 8000d40:	d02e      	beq.n	8000da0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000d42:	6882      	ldr	r2, [r0, #8]
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	2a01      	cmp	r2, #1
 8000d4a:	d031      	beq.n	8000db0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000d4e:	6889      	ldr	r1, [r1, #8]
 8000d50:	6882      	ldr	r2, [r0, #8]
 8000d52:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000d56:	430e      	orrs	r6, r1
 8000d58:	f022 020f 	bic.w	r2, r2, #15
 8000d5c:	4316      	orrs	r6, r2
 8000d5e:	6086      	str	r6, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2000      	movs	r0, #0
 8000d62:	e7d4      	b.n	8000d0e <HAL_ADCEx_MultiModeConfigChannel+0x32>
  __HAL_LOCK(hadc);
 8000d64:	2002      	movs	r0, #2
 8000d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000d68:	4914      	ldr	r1, [pc, #80]	; (8000dbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000d6a:	688a      	ldr	r2, [r1, #8]
 8000d6c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d70:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d72:	68a2      	ldr	r2, [r4, #8]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	2a01      	cmp	r2, #1
 8000d7a:	d00d      	beq.n	8000d98 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000d7c:	6882      	ldr	r2, [r0, #8]
 8000d7e:	f002 0203 	and.w	r2, r2, #3
 8000d82:	2a01      	cmp	r2, #1
 8000d84:	d010      	beq.n	8000da8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000d88:	688a      	ldr	r2, [r1, #8]
 8000d8a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000d8e:	f022 020f 	bic.w	r2, r2, #15
 8000d92:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	e7ba      	b.n	8000d0e <HAL_ADCEx_MultiModeConfigChannel+0x32>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	07d1      	lsls	r1, r2, #31
 8000d9c:	d4e0      	bmi.n	8000d60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000d9e:	e7ed      	b.n	8000d7c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	07d4      	lsls	r4, r2, #31
 8000da4:	d5cd      	bpl.n	8000d42 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000da6:	e7db      	b.n	8000d60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	07d2      	lsls	r2, r2, #31
 8000dac:	d4d8      	bmi.n	8000d60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000dae:	e7ea      	b.n	8000d86 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000db0:	6802      	ldr	r2, [r0, #0]
 8000db2:	07d0      	lsls	r0, r2, #31
 8000db4:	d4d4      	bmi.n	8000d60 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000db6:	e7c9      	b.n	8000d4c <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8000db8:	50000100 	.word	0x50000100
 8000dbc:	50000300 	.word	0x50000300

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dc2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000dc8:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dca:	0200      	lsls	r0, r0, #8
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dd8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dda:	60d3      	str	r3, [r2, #12]
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b470      	push	{r4, r5, r6}
 8000de8:	68dc      	ldr	r4, [r3, #12]
 8000dea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dee:	f1c4 0607 	rsb	r6, r4, #7
 8000df2:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	bf28      	it	cs
 8000dfa:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d917      	bls.n	8000e30 <HAL_NVIC_SetPriority+0x4c>
 8000e00:	3c03      	subs	r4, #3
 8000e02:	2501      	movs	r5, #1
 8000e04:	40a5      	lsls	r5, r4
 8000e06:	3d01      	subs	r5, #1
 8000e08:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4019      	ands	r1, r3
 8000e12:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000e14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e16:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000e1a:	db0c      	blt.n	8000e36 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e24:	0109      	lsls	r1, r1, #4
 8000e26:	b2c9      	uxtb	r1, r1
 8000e28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e2c:	bc70      	pop	{r4, r5, r6}
 8000e2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e30:	2200      	movs	r2, #0
 8000e32:	4614      	mov	r4, r2
 8000e34:	e7e9      	b.n	8000e0a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_NVIC_SetPriority+0x68>)
 8000e38:	f000 000f 	and.w	r0, r0, #15
 8000e3c:	0109      	lsls	r1, r1, #4
 8000e3e:	4403      	add	r3, r0
 8000e40:	b2c9      	uxtb	r1, r1
 8000e42:	7619      	strb	r1, [r3, #24]
 8000e44:	bc70      	pop	{r4, r5, r6}
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	e000ecfc 	.word	0xe000ecfc

08000e50 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e50:	f000 011f 	and.w	r1, r0, #31
 8000e54:	2301      	movs	r3, #1
 8000e56:	0940      	lsrs	r0, r0, #5
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <HAL_NVIC_EnableIRQ+0x14>)
 8000e5a:	408b      	lsls	r3, r1
 8000e5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	3801      	subs	r0, #1
 8000e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e6e:	d20e      	bcs.n	8000e8e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	4c08      	ldr	r4, [pc, #32]	; (8000e98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	20f0      	movs	r0, #240	; 0xf0
 8000e7a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e80:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e82:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e9e:	6809      	ldr	r1, [r1, #0]
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	f000 80d9 	beq.w	8001058 <HAL_GPIO_Init+0x1bc>
{
 8000ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800106c <HAL_GPIO_Init+0x1d0>
{
 8000eae:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000eb0:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb2:	f04f 0801 	mov.w	r8, #1
 8000eb6:	e079      	b.n	8000fac <HAL_GPIO_Init+0x110>
 8000eb8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebc:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000ebe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	fa03 f309 	lsl.w	r3, r3, r9
 8000ec6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ecc:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000edc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000ee0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee2:	f240 8098 	bls.w	8001016 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8000ee6:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eec:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eee:	fa02 f209 	lsl.w	r2, r2, r9
 8000ef2:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef4:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8000ef6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	d554      	bpl.n	8000fa4 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <HAL_GPIO_Init+0x1c0>)
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_GPIO_Init+0x1c0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	6993      	ldr	r3, [r2, #24]
 8000f08:	f025 0603 	bic.w	r6, r5, #3
 8000f0c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000f18:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000f1a:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f20:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	f04f 090f 	mov.w	r9, #15
 8000f28:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f2c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000f30:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f34:	f000 8086 	beq.w	8001044 <HAL_GPIO_Init+0x1a8>
 8000f38:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_GPIO_Init+0x1c4>)
 8000f3a:	4290      	cmp	r0, r2
 8000f3c:	f000 8084 	beq.w	8001048 <HAL_GPIO_Init+0x1ac>
 8000f40:	4a48      	ldr	r2, [pc, #288]	; (8001064 <HAL_GPIO_Init+0x1c8>)
 8000f42:	4290      	cmp	r0, r2
 8000f44:	f000 8083 	beq.w	800104e <HAL_GPIO_Init+0x1b2>
 8000f48:	4a47      	ldr	r2, [pc, #284]	; (8001068 <HAL_GPIO_Init+0x1cc>)
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	bf0b      	itete	eq
 8000f4e:	f04f 0903 	moveq.w	r9, #3
 8000f52:	2205      	movne	r2, #5
 8000f54:	fa09 f303 	lsleq.w	r3, r9, r3
 8000f58:	fa02 f303 	lslne.w	r3, r2, r3
 8000f5c:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f60:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8000f62:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f68:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	bf54      	ite	pl
 8000f6c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000f6e:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8000f70:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000f74:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f78:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	bf54      	ite	pl
 8000f7c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000f7e:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8000f80:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f84:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f88:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	bf54      	ite	pl
 8000f8c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000f8e:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8000f90:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000f94:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	bf54      	ite	pl
 8000f9c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000f9e:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8000fa0:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8000fa4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fa6:	fa31 f305 	lsrs.w	r3, r1, r5
 8000faa:	d048      	beq.n	800103e <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fac:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8000fb0:	ea12 0701 	ands.w	r7, r2, r1
 8000fb4:	d0f6      	beq.n	8000fa4 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000fba:	f024 0a10 	bic.w	sl, r4, #16
 8000fbe:	f1ba 0f02 	cmp.w	sl, #2
 8000fc2:	f47f af79 	bne.w	8000eb8 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8000fc6:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000fca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8000fd2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	f04f 0a0f 	mov.w	sl, #15
 8000fdc:	fa0a fb03 	lsl.w	fp, sl, r3
 8000fe0:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8000fe8:	fa06 f303 	lsl.w	r3, r6, r3
 8000fec:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8000ff0:	f8c9 3020 	str.w	r3, [r9, #32]
 8000ff4:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000ffa:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	fa03 f309 	lsl.w	r3, r3, r9
 8001002:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001008:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100c:	fa06 f609 	lsl.w	r6, r6, r9
 8001010:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001014:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001016:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001020:	fa06 f609 	lsl.w	r6, r6, r9
 8001024:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001028:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800102a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001032:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001036:	40ae      	lsls	r6, r5
 8001038:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800103a:	6046      	str	r6, [r0, #4]
 800103c:	e753      	b.n	8000ee6 <HAL_GPIO_Init+0x4a>
  }
}
 800103e:	b003      	add	sp, #12
 8001040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001044:	2300      	movs	r3, #0
 8001046:	e789      	b.n	8000f5c <HAL_GPIO_Init+0xc0>
 8001048:	fa08 f303 	lsl.w	r3, r8, r3
 800104c:	e786      	b.n	8000f5c <HAL_GPIO_Init+0xc0>
 800104e:	f04f 0902 	mov.w	r9, #2
 8001052:	fa09 f303 	lsl.w	r3, r9, r3
 8001056:	e781      	b.n	8000f5c <HAL_GPIO_Init+0xc0>
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001070:	6903      	ldr	r3, [r0, #16]
 8001072:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001074:	bf14      	ite	ne
 8001076:	2001      	movne	r0, #1
 8001078:	2000      	moveq	r0, #0
 800107a:	4770      	bx	lr

0800107c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	b90a      	cbnz	r2, 8001082 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	6281      	str	r1, [r0, #40]	; 0x28
 8001080:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001082:	6181      	str	r1, [r0, #24]
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <HAL_HRTIM_Init>:
{
  uint8_t timer_idx;
  uint32_t hrtim_mcr;
  
  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001088:	2800      	cmp	r0, #0
 800108a:	d06d      	beq.n	8001168 <HAL_HRTIM_Init+0xe0>
{
 800108c:	b510      	push	{r4, lr}
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;  
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;  
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;  

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != RESET)
 800108e:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;    
 8001090:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001092:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != RESET)
 8001094:	07d2      	lsls	r2, r2, #31
{
 8001096:	b082      	sub	sp, #8
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001098:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;    
 800109c:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;     
 80010a0:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;  
 80010a4:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;  
 80010a8:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;  
 80010ac:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;  
 80010b0:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != RESET)
 80010b4:	d50f      	bpl.n	80010d6 <HAL_HRTIM_Init+0x4e>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
    
    /* The synchronization output initialization procedure must be done prior 
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80010b6:	6801      	ldr	r1, [r0, #0]
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <HAL_HRTIM_Init+0xfc>)
 80010ba:	4299      	cmp	r1, r3
 80010bc:	d056      	beq.n	800116c <HAL_HRTIM_Init+0xe4>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
    }
    
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80010be:	680a      	ldr	r2, [r1, #0]
    
    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80010c0:	6904      	ldr	r4, [r0, #16]
    
    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80010c2:	6943      	ldr	r3, [r0, #20]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80010c4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80010c8:	f404 4440 	and.w	r4, r4, #49152	; 0xc000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80010cc:	4322      	orrs	r2, r4
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80010ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80010d2:	4313      	orrs	r3, r2
    
    /* Update the HRTIM registers */  
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;    
 80010d4:	600b      	str	r3, [r1, #0]
 80010d6:	4604      	mov	r4, r0
  }

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
  HAL_HRTIM_MspInit(hhrtim);
 80010d8:	f001 fb42 	bl	8002760 <HAL_HRTIM_MspInit>
  
  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != RESET)
 80010dc:	68a3      	ldr	r3, [r4, #8]
 80010de:	079b      	lsls	r3, r3, #30
 80010e0:	d508      	bpl.n	80010f4 <HAL_HRTIM_Init+0x6c>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
    
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80010e2:	6821      	ldr	r1, [r4, #0]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80010e4:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80010e6:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80010e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80010ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80010f0:	4313      	orrs	r3, r2
    
    /* Update the HRTIM registers */  
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;    
 80010f2:	600b      	str	r3, [r1, #0]
  
  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
  
  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80010f4:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80010f6:	2201      	movs	r2, #1
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
  }
  
  return HAL_OK;
 80010f8:	4618      	mov	r0, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80010fa:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);
 80010fe:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001102:	61a3      	str	r3, [r4, #24]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001104:	61e3      	str	r3, [r4, #28]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001106:	6223      	str	r3, [r4, #32]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001108:	6263      	str	r3, [r4, #36]	; 0x24
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800110a:	62a3      	str	r3, [r4, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800110c:	6323      	str	r3, [r4, #48]	; 0x30
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800110e:	6363      	str	r3, [r4, #52]	; 0x34
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001110:	63a3      	str	r3, [r4, #56]	; 0x38
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001112:	63e3      	str	r3, [r4, #60]	; 0x3c
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001114:	6423      	str	r3, [r4, #64]	; 0x40
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001116:	6463      	str	r3, [r4, #68]	; 0x44
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001118:	64e3      	str	r3, [r4, #76]	; 0x4c
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800111a:	6523      	str	r3, [r4, #80]	; 0x50
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800111c:	6563      	str	r3, [r4, #84]	; 0x54
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800111e:	65a3      	str	r3, [r4, #88]	; 0x58
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001120:	65e3      	str	r3, [r4, #92]	; 0x5c
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001122:	6623      	str	r3, [r4, #96]	; 0x60
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001124:	66a3      	str	r3, [r4, #104]	; 0x68
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001126:	66e3      	str	r3, [r4, #108]	; 0x6c
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001128:	6723      	str	r3, [r4, #112]	; 0x70
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800112a:	6763      	str	r3, [r4, #116]	; 0x74
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800112c:	67a3      	str	r3, [r4, #120]	; 0x78
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800112e:	67e3      	str	r3, [r4, #124]	; 0x7c
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001130:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001134:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001138:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800113c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001140:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001144:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001148:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800114c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001150:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001154:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001158:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800115c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001160:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 8001164:	b002      	add	sp, #8
 8001166:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800116c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	9b01      	ldr	r3, [sp, #4]
 8001182:	e79c      	b.n	80010be <HAL_HRTIM_Init+0x36>
 8001184:	40017400 	.word	0x40017400

08001188 <HAL_HRTIM_DLLCalibrationStart>:
  
   /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001188:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d016      	beq.n	80011be <HAL_HRTIM_DLLCalibrationStart+0x36>
  
  hhrtim->State = HAL_HRTIM_STATE_BUSY; 
 8001190:	2302      	movs	r3, #2
  
  /* Configure DLL Calibration */
  hrtim_dllcr = hhrtim->Instance->sCommonRegs.DLLCR;
 8001192:	6802      	ldr	r2, [r0, #0]
{
 8001194:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY; 
 8001196:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  __HAL_LOCK(hhrtim);
 800119a:	2401      	movs	r4, #1
  hrtim_dllcr = hhrtim->Instance->sCommonRegs.DLLCR;
 800119c:	f8d2 33cc 	ldr.w	r3, [r2, #972]	; 0x3cc
  __HAL_LOCK(hhrtim);
 80011a0:	f880 40c0 	strb.w	r4, [r0, #192]	; 0xc0
  
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80011a4:	1c48      	adds	r0, r1, #1
 80011a6:	d00c      	beq.n	80011c2 <HAL_HRTIM_DLLCalibrationStart+0x3a>
    hrtim_dllcr |= HRTIM_DLLCR_CAL;    
  }
  else
  {
    /* Periodic DLL calibration */
    hrtim_dllcr &= ~(HRTIM_DLLCR_CALRTE | HRTIM_DLLCR_CAL);
 80011a8:	f023 030d 	bic.w	r3, r3, #13
    hrtim_dllcr |= (CalibrationRate | HRTIM_DLLCR_CALEN);
 80011ac:	f041 0102 	orr.w	r1, r1, #2
 80011b0:	4319      	orrs	r1, r3
  }

  /* Update HRTIM register */
  hhrtim->Instance->sCommonRegs.DLLCR = hrtim_dllcr;
  
  return HAL_OK;
 80011b2:	2000      	movs	r0, #0
  hhrtim->Instance->sCommonRegs.DLLCR = hrtim_dllcr;
 80011b4:	f8c2 13cc 	str.w	r1, [r2, #972]	; 0x3cc
}
 80011b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011bc:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 80011be:	2002      	movs	r0, #2
 80011c0:	4770      	bx	lr
    hrtim_dllcr &= ~(HRTIM_DLLCR_CALEN);
 80011c2:	f023 0102 	bic.w	r1, r3, #2
    hrtim_dllcr |= HRTIM_DLLCR_CAL;    
 80011c6:	4321      	orrs	r1, r4
  return HAL_OK;
 80011c8:	2000      	movs	r0, #0
  hhrtim->Instance->sCommonRegs.DLLCR = hrtim_dllcr;
 80011ca:	f8c2 13cc 	str.w	r1, [r2, #972]	; 0x3cc
}
 80011ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status 
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
  uint32_t tickstart=0U;

  tickstart = HAL_GetTick();  
 80011da:	f7ff f933 	bl	8000444 <HAL_GetTick>
 80011de:	4606      	mov	r6, r0
 80011e0:	1c68      	adds	r0, r5, #1
 80011e2:	6822      	ldr	r2, [r4, #0]
 80011e4:	d10a      	bne.n	80011fc <HAL_HRTIM_PollForDLLCalibration+0x28>
     
  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == RESET)
 80011e6:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 80011ea:	03d9      	lsls	r1, r3, #15
 80011ec:	d5fb      	bpl.n	80011e6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */  
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80011ee:	2301      	movs	r3, #1
 
  /* Process unlocked */
  __HAL_UNLOCK(hhrtim); 
 80011f0:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80011f2:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim); 
 80011f6:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

  return HAL_OK;
}
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == RESET)
 80011fc:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 8001200:	03db      	lsls	r3, r3, #15
 8001202:	d4f4      	bmi.n	80011ee <HAL_HRTIM_PollForDLLCalibration+0x1a>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001204:	b125      	cbz	r5, 8001210 <HAL_HRTIM_PollForDLLCalibration+0x3c>
 8001206:	f7ff f91d 	bl	8000444 <HAL_GetTick>
 800120a:	1b80      	subs	r0, r0, r6
 800120c:	4285      	cmp	r5, r0
 800120e:	d2e7      	bcs.n	80011e0 <HAL_HRTIM_PollForDLLCalibration+0xc>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001210:	2307      	movs	r3, #7
 8001212:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
        return HAL_TIMEOUT;
 8001216:	2003      	movs	r0, #3
 8001218:	bd70      	pop	{r4, r5, r6, pc}
 800121a:	bf00      	nop

0800121c <HAL_HRTIM_TimeBaseConfig>:
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio)); 
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode)); 
  
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800121c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d020      	beq.n	8001268 <HAL_HRTIM_TimeBaseConfig+0x4c>
  {
     return HAL_BUSY;
  }
 
  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001226:	2302      	movs	r3, #2

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001228:	2905      	cmp	r1, #5
{
 800122a:	b4f0      	push	{r4, r5, r6, r7}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800122c:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001230:	d01c      	beq.n	800126c <HAL_HRTIM_TimeBaseConfig+0x50>
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
  uint32_t hrtim_timcr;
  
  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001232:	6804      	ldr	r4, [r0, #0]
 
  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001234:	6897      	ldr	r7, [r2, #8]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001236:	68d6      	ldr	r6, [r2, #12]
  
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR  = hrtim_timcr;
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001238:	6815      	ldr	r5, [r2, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800123a:	6852      	ldr	r2, [r2, #4]
 800123c:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001240:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8001244:	f023 0307 	bic.w	r3, r3, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001248:	433b      	orrs	r3, r7
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800124a:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800124e:	4333      	orrs	r3, r6
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR  = hrtim_timcr;
 8001250:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001254:	f8c1 5094 	str.w	r5, [r1, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001258:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800125c:	2301      	movs	r3, #1
 800125e:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
}
 8001262:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK; 
 8001264:	2000      	movs	r0, #0
}
 8001266:	4770      	bx	lr
     return HAL_BUSY;
 8001268:	4618      	mov	r0, r3
 800126a:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800126c:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800126e:	6896      	ldr	r6, [r2, #8]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001270:	680b      	ldr	r3, [r1, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001272:	68d5      	ldr	r5, [r2, #12]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001274:	6814      	ldr	r4, [r2, #0]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8001276:	6852      	ldr	r2, [r2, #4]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001278:	f023 0307 	bic.w	r3, r3, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800127c:	4333      	orrs	r3, r6
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800127e:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001282:	432b      	orrs	r3, r5
  hhrtim->Instance->sMasterRegs.MCR  = hrtim_mcr;
 8001284:	600b      	str	r3, [r1, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001286:	614c      	str	r4, [r1, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8001288:	618a      	str	r2, [r1, #24]
 800128a:	e7e7      	b.n	800125c <HAL_HRTIM_TimeBaseConfig+0x40>

0800128c <HAL_HRTIM_FaultConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800128c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d01a      	beq.n	80012cc <HAL_HRTIM_FaultConfig+0x40>
  __HAL_LOCK(hhrtim);
 8001296:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d015      	beq.n	80012ca <HAL_HRTIM_FaultConfig+0x3e>
{
 800129e:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80012a0:	2302      	movs	r3, #2
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80012a2:	6804      	ldr	r4, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80012a4:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  switch (Fault)
 80012a8:	3901      	subs	r1, #1
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80012aa:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 80012ae:	f8d4 53d4 	ldr.w	r5, [r4, #980]	; 0x3d4
  switch (Fault)
 80012b2:	290f      	cmp	r1, #15
 80012b4:	d81a      	bhi.n	80012ec <HAL_HRTIM_FaultConfig+0x60>
 80012b6:	e8df f001 	tbb	[pc, r1]
 80012ba:	4251      	.short	0x4251
 80012bc:	19190b19 	.word	0x19190b19
 80012c0:	19193319 	.word	0x19193319
 80012c4:	19191919 	.word	0x19191919
 80012c8:	2519      	.short	0x2519
     return HAL_BUSY;
 80012ca:	2302      	movs	r3, #2
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	4770      	bx	lr
      hrtim_fltinr1 |= (pFaultCfg->Polarity << 16U);
 80012d0:	e892 4002 	ldmia.w	r2, {r1, lr}
      hrtim_fltinr1 |= (pFaultCfg->Filter << 16U);
 80012d4:	6897      	ldr	r7, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Lock << 16U);
 80012d6:	68d6      	ldr	r6, [r2, #12]
      hrtim_fltinr1 |= pFaultCfg->Source << HRTIM_FLTINR1_FLT3SRC_Pos;
 80012d8:	048a      	lsls	r2, r1, #18
      hrtim_fltinr1 |= (pFaultCfg->Lock << 16U);
 80012da:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80012de:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 80012e2:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
      hrtim_fltinr1 |= (pFaultCfg->Lock << 16U);
 80012e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80012ea:	4313      	orrs	r3, r2
  __HAL_UNLOCK(hhrtim);  
 80012ec:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80012ee:	2101      	movs	r1, #1
  hhrtim->Instance->sCommonRegs.FLTINR1 = hrtim_fltinr1;
 80012f0:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = hrtim_fltinr2;
 80012f4:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80012f8:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);  
 80012fc:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
}
 8001300:	4610      	mov	r0, r2
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hrtim_fltinr2 |= pFaultCfg->Lock;
 8001304:	6851      	ldr	r1, [r2, #4]
 8001306:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800130a:	68d7      	ldr	r7, [r2, #12]
      hrtim_fltinr1 |= pFaultCfg->Source << HRTIM_FLTINR2_FLT5SRC_Pos;
 800130c:	6816      	ldr	r6, [r2, #0]
      hrtim_fltinr2 |= pFaultCfg->Lock;
 800130e:	ea41 020e 	orr.w	r2, r1, lr
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8001312:	f025 05fe 	bic.w	r5, r5, #254	; 0xfe
      hrtim_fltinr2 |= pFaultCfg->Lock;
 8001316:	433a      	orrs	r2, r7
 8001318:	4315      	orrs	r5, r2
      hrtim_fltinr1 |= pFaultCfg->Source << HRTIM_FLTINR2_FLT5SRC_Pos;
 800131a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    break;
 800131e:	e7e5      	b.n	80012ec <HAL_HRTIM_FaultConfig+0x60>
      hrtim_fltinr1 |= (pFaultCfg->Polarity << 24U);
 8001320:	e892 4002 	ldmia.w	r2, {r1, lr}
      hrtim_fltinr1 |= (pFaultCfg->Filter << 24U);
 8001324:	6897      	ldr	r7, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Lock << 24U);
 8001326:	68d6      	ldr	r6, [r2, #12]
      hrtim_fltinr1 |= pFaultCfg->Source << HRTIM_FLTINR1_FLT4SRC_Pos;
 8001328:	068a      	lsls	r2, r1, #26
      hrtim_fltinr1 |= (pFaultCfg->Lock << 24U);
 800132a:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
 800132e:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8001332:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
      hrtim_fltinr1 |= (pFaultCfg->Lock << 24U);
 8001336:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800133a:	4313      	orrs	r3, r2
    break;
 800133c:	e7d6      	b.n	80012ec <HAL_HRTIM_FaultConfig+0x60>
      hrtim_fltinr1 |= (pFaultCfg->Polarity << 8U);
 800133e:	e892 4002 	ldmia.w	r2, {r1, lr}
      hrtim_fltinr1 |= (pFaultCfg->Filter << 8U);
 8001342:	6897      	ldr	r7, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Lock << 8U);
 8001344:	68d6      	ldr	r6, [r2, #12]
      hrtim_fltinr1 |= pFaultCfg->Source << HRTIM_FLTINR1_FLT2SRC_Pos;
 8001346:	028a      	lsls	r2, r1, #10
      hrtim_fltinr1 |= (pFaultCfg->Lock << 8U);
 8001348:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 800134c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8001350:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
      hrtim_fltinr1 |= (pFaultCfg->Lock << 8U);
 8001354:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8001358:	4313      	orrs	r3, r2
    break;
 800135a:	e7c7      	b.n	80012ec <HAL_HRTIM_FaultConfig+0x60>
      hrtim_fltinr1 |= pFaultCfg->Lock;
 800135c:	6851      	ldr	r1, [r2, #4]
 800135e:	f8d2 e000 	ldr.w	lr, [r2]
 8001362:	6897      	ldr	r7, [r2, #8]
 8001364:	68d6      	ldr	r6, [r2, #12]
 8001366:	ea41 020e 	orr.w	r2, r1, lr
 800136a:	433a      	orrs	r2, r7
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 800136c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
      hrtim_fltinr1 |= pFaultCfg->Lock;
 8001370:	4332      	orrs	r2, r6
 8001372:	4313      	orrs	r3, r2
    break;
 8001374:	e7ba      	b.n	80012ec <HAL_HRTIM_FaultConfig+0x60>
 8001376:	bf00      	nop

08001378 <HAL_HRTIM_FaultModeCtl>:
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_1) != RESET)
 800137e:	f011 0f01 	tst.w	r1, #1
    hrtim_fltinr1 &= ~HRTIM_FLTINR1_FLT1E;
 8001382:	bf1c      	itt	ne
 8001384:	f023 0301 	bicne.w	r3, r3, #1
    hrtim_fltinr1 |= Enable;
 8001388:	4313      	orrne	r3, r2
  if ((Faults & HRTIM_FAULT_2) != RESET)
 800138a:	f011 0f02 	tst.w	r1, #2
    hrtim_fltinr1 &= ~HRTIM_FLTINR1_FLT2E;
 800138e:	bf1c      	itt	ne
 8001390:	f423 7380 	bicne.w	r3, r3, #256	; 0x100
    hrtim_fltinr1 |= (Enable << 8U);
 8001394:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
  if ((Faults & HRTIM_FAULT_3) != RESET)
 8001398:	f011 0f04 	tst.w	r1, #4
    hrtim_fltinr1 &= ~HRTIM_FLTINR1_FLT3E;
 800139c:	bf1c      	itt	ne
 800139e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
    hrtim_fltinr1 |= (Enable << 16U);
 80013a2:	ea43 4302 	orrne.w	r3, r3, r2, lsl #16
  if ((Faults & HRTIM_FAULT_4) != RESET)
 80013a6:	f011 0f08 	tst.w	r1, #8
{
 80013aa:	b410      	push	{r4}
    hrtim_fltinr1 &= ~HRTIM_FLTINR1_FLT4E; 
 80013ac:	bf18      	it	ne
 80013ae:	f023 7380 	bicne.w	r3, r3, #16777216	; 0x1000000
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 80013b2:	f8d0 43d4 	ldr.w	r4, [r0, #980]	; 0x3d4
    hrtim_fltinr1 |= (Enable << 24U);
 80013b6:	bf18      	it	ne
 80013b8:	ea43 6302 	orrne.w	r3, r3, r2, lsl #24
  if ((Faults & HRTIM_FAULT_5) != RESET)
 80013bc:	06c9      	lsls	r1, r1, #27
    hrtim_fltinr2 &= ~HRTIM_FLTINR2_FLT5E;
 80013be:	bf44      	itt	mi
 80013c0:	f024 0401 	bicmi.w	r4, r4, #1
    hrtim_fltinr2 |= Enable;
 80013c4:	4314      	orrmi	r4, r2
  hhrtim->Instance->sCommonRegs.FLTINR1 = hrtim_fltinr1;
 80013c6:	f8c0 33d0 	str.w	r3, [r0, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = hrtim_fltinr2;
 80013ca:	f8c0 43d4 	str.w	r4, [r0, #980]	; 0x3d4
}      
 80013ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_HRTIM_ADCTriggerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80013d4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d017      	beq.n	800140e <HAL_HRTIM_ADCTriggerConfig+0x3a>
  __HAL_LOCK(hhrtim);
 80013de:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d012      	beq.n	800140c <HAL_HRTIM_ADCTriggerConfig+0x38>
{
 80013e6:	b430      	push	{r4, r5}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80013e8:	2302      	movs	r3, #2
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80013ea:	6804      	ldr	r4, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80013ec:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  __HAL_LOCK(hhrtim);
 80013f0:	2501      	movs	r5, #1
  switch (ADCTrigger)
 80013f2:	3901      	subs	r1, #1
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80013f4:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
  __HAL_LOCK(hhrtim);
 80013f8:	f880 50c0 	strb.w	r5, [r0, #192]	; 0xc0
  switch (ADCTrigger)
 80013fc:	2907      	cmp	r1, #7
 80013fe:	d811      	bhi.n	8001424 <HAL_HRTIM_ADCTriggerConfig+0x50>
 8001400:	e8df f001 	tbb	[pc, r1]
 8001404:	2510072f 	.word	0x2510072f
 8001408:	1b101010 	.word	0x1b101010
     return HAL_BUSY;
 800140c:	2302      	movs	r3, #2
}
 800140e:	4618      	mov	r0, r3
 8001410:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8001412:	ca06      	ldmia	r2, {r1, r2}
 8001414:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC); 
 8001418:	00ca      	lsls	r2, r1, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800141a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC); 
 800141e:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
 8001422:	4313      	orrs	r3, r2
  __HAL_UNLOCK(hhrtim);  
 8001424:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001426:	2101      	movs	r1, #1
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8001428:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800142c:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);  
 8001430:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
}
 8001434:	bc30      	pop	{r4, r5}
 8001436:	4610      	mov	r0, r2
 8001438:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800143a:	ca06      	ldmia	r2, {r1, r2}
 800143c:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC); 
 8001440:	024a      	lsls	r2, r1, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8001442:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC); 
 8001446:	f002 6260 	and.w	r2, r2, #234881024	; 0xe000000
 800144a:	4313      	orrs	r3, r2
    break;
 800144c:	e7ea      	b.n	8001424 <HAL_HRTIM_ADCTriggerConfig+0x50>
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800144e:	ca06      	ldmia	r2, {r1, r2}
 8001450:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC); 
 8001454:	018a      	lsls	r2, r1, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8001456:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC); 
 800145a:	f002 72e0 	and.w	r2, r2, #29360128	; 0x1c00000
 800145e:	4313      	orrs	r3, r2
    break;
 8001460:	e7e0      	b.n	8001424 <HAL_HRTIM_ADCTriggerConfig+0x50>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8001462:	ca06      	ldmia	r2, {r1, r2}
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8001464:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8001468:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800146c:	f401 22e0 	and.w	r2, r1, #458752	; 0x70000
 8001470:	4313      	orrs	r3, r2
    break;
 8001472:	e7d7      	b.n	8001424 <HAL_HRTIM_ADCTriggerConfig+0x50>

08001474 <HAL_HRTIM_WaveformTimerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001474:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d07e      	beq.n	800157c <HAL_HRTIM_WaveformTimerConfig+0x108>
  __HAL_LOCK(hhrtim);
 800147e:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d07a      	beq.n	800157c <HAL_HRTIM_WaveformTimerConfig+0x108>
{
 8001486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800148a:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 800148c:	2401      	movs	r4, #1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800148e:	2905      	cmp	r1, #5
  __HAL_LOCK(hhrtim);
 8001490:	f880 40c0 	strb.w	r4, [r0, #192]	; 0xc0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001494:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001498:	f000 80b9 	beq.w	800160e <HAL_HRTIM_WaveformTimerConfig+0x19a>
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800149c:	6804      	ldr	r4, [r0, #0]
  hrtim_timrstr = hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR;
  hrtim_bmcr    = hhrtim->Instance->sCommonRegs.BMCR;
  
  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800149e:	f8d2 9014 	ldr.w	r9, [r2, #20]
  
  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80014a2:	f8d2 e018 	ldr.w	lr, [r2, #24]
 
  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80014a6:	69d6      	ldr	r6, [r2, #28]
  
  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80014a8:	6a15      	ldr	r5, [r2, #32]
  
  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80014aa:	6a57      	ldr	r7, [r2, #36]	; 0x24
 80014ac:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 80014b0:	eb04 030c 	add.w	r3, r4, ip
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80014b4:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 80014b8:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
 80014bc:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
  hrtim_timcr   = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80014c0:	f8d3 a080 	ldr.w	sl, [r3, #128]	; 0x80
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80014c4:	f02a 0a20 	bic.w	sl, sl, #32
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80014c8:	ea4a 0a09 	orr.w	sl, sl, r9
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80014cc:	f42a 6a00 	bic.w	sl, sl, #2048	; 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80014d0:	ea4a 0a0e 	orr.w	sl, sl, lr
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80014d4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80014d8:	ea4a 0a06 	orr.w	sl, sl, r6
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80014dc:	f02a 6ac0 	bic.w	sl, sl, #100663296	; 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80014e0:	ea4a 0a05 	orr.w	sl, sl, r5
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80014e4:	f02a 6a00 	bic.w	sl, sl, #134217728	; 0x8000000
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80014e8:	f8d3 60e8 	ldr.w	r6, [r3, #232]	; 0xe8
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80014ec:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
  hrtim_timcr |= pTimerCfg->PushPull;
 80014f0:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80014f4:	ea4a 0a07 	orr.w	sl, sl, r7
  hrtim_timrstr = hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR;
 80014f8:	f8d3 70d4 	ldr.w	r7, [r3, #212]	; 0xd4
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80014fc:	6a97      	ldr	r7, [r2, #40]	; 0x28
  hrtim_bmcr    = hhrtim->Instance->sCommonRegs.BMCR;
 80014fe:	f8d4 e3a0 	ldr.w	lr, [r4, #928]	; 0x3a0
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8001502:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8001506:	ea4a 0707 	orr.w	r7, sl, r7
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800150a:	f427 3a00 	bic.w	sl, r7, #131072	; 0x20000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800150e:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8001510:	f1b7 5f00 	cmp.w	r7, #536870912	; 0x20000000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8001514:	bf08      	it	eq
 8001516:	f44a 3a00 	orreq.w	sl, sl, #131072	; 0x20000
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
  
  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800151a:	f026 4800 	bic.w	r8, r6, #2147483648	; 0x80000000
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800151e:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8001522:	6b96      	ldr	r6, [r2, #56]	; 0x38
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001524:	6d17      	ldr	r7, [r2, #80]	; 0x50
  hrtim_timcr |= pTimerCfg->PushPull;
 8001526:	ea4a 0a09 	orr.w	sl, sl, r9
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800152a:	f006 061f 	and.w	r6, r6, #31
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800152e:	f42a 2a80 	bic.w	sl, sl, #262144	; 0x40000
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8001532:	f028 081f 	bic.w	r8, r8, #31
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001536:	ea4a 0a07 	orr.w	sl, sl, r7
  
  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800153a:	ea48 0806 	orr.w	r8, r8, r6
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800153e:	6c97      	ldr	r7, [r2, #72]	; 0x48
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8001540:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8001542:	f02a 7afc 	bic.w	sl, sl, #33030144	; 0x1f80000
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8001546:	ea48 0806 	orr.w	r8, r8, r6
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800154a:	ea4a 0a07 	orr.w	sl, sl, r7
  
  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800154e:	f1b9 0f00 	cmp.w	r9, #0
 8001552:	d015      	beq.n	8001580 <HAL_HRTIM_WaveformTimerConfig+0x10c>
  
  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (   ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001554:	6c57      	ldr	r7, [r2, #68]	; 0x44
 8001556:	f5b7 6f60 	cmp.w	r7, #3584	; 0xe00
 800155a:	f000 8096 	beq.w	800168a <HAL_HRTIM_WaveformTimerConfig+0x216>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800155e:	f5b7 5ff0 	cmp.w	r7, #7680	; 0x1e00
 8001562:	f000 8092 	beq.w	800168a <HAL_HRTIM_WaveformTimerConfig+0x216>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8001566:	f425 55f0 	bic.w	r5, r5, #7680	; 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800156a:	433d      	orrs	r5, r7
  }
    
  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800156c:	6cd7      	ldr	r7, [r2, #76]	; 0x4c

  /* Set the timer burst mode */
  switch (TimerIdx)
 800156e:	2904      	cmp	r1, #4
 8001570:	d818      	bhi.n	80015a4 <HAL_HRTIM_WaveformTimerConfig+0x130>
 8001572:	e8df f001 	tbb	[pc, r1]
 8001576:	b7bd      	.short	0xb7bd
 8001578:	abb1      	.short	0xabb1
 800157a:	12          	.byte	0x12
 800157b:	00          	.byte	0x00
     return HAL_BUSY;
 800157c:	2002      	movs	r0, #2
 800157e:	4770      	bx	lr
  if (   ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001580:	6c57      	ldr	r7, [r2, #68]	; 0x44
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8001582:	6c16      	ldr	r6, [r2, #64]	; 0x40
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8001584:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  if (   ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001588:	f5b7 6f60 	cmp.w	r7, #3584	; 0xe00
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800158c:	ea45 0506 	orr.w	r5, r5, r6
  if (   ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001590:	d0ec      	beq.n	800156c <HAL_HRTIM_WaveformTimerConfig+0xf8>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8001592:	f5b7 5ff0 	cmp.w	r7, #7680	; 0x1e00
 8001596:	d1e6      	bne.n	8001566 <HAL_HRTIM_WaveformTimerConfig+0xf2>
 8001598:	e7e8      	b.n	800156c <HAL_HRTIM_WaveformTimerConfig+0xf8>
    }
    break;
  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800159a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800159c:	f42e 1e00 	bic.w	lr, lr, #2097152	; 0x200000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80015a0:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
    break;
  }
 
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR  = hrtim_timcr;
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80015a4:	44a4      	add	ip, r4
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80015a6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80015aa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR  = hrtim_timcr;
 80015ae:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80015b2:	f8d2 9004 	ldr.w	r9, [r2, #4]
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80015b6:	f8d2 a000 	ldr.w	sl, [r2]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80015ba:	6913      	ldr	r3, [r2, #16]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80015bc:	f8cc 80e8 	str.w	r8, [ip, #232]	; 0xe8
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80015c0:	f8d2 8008 	ldr.w	r8, [r2, #8]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80015c4:	f8cc 50e4 	str.w	r5, [ip, #228]	; 0xe4
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80015c8:	68d5      	ldr	r5, [r2, #12]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;  
 80015ca:	f8cc 70d4 	str.w	r7, [ip, #212]	; 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80015ce:	f8c4 e3a0 	str.w	lr, [r4, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80015d2:	f8c6 a020 	str.w	sl, [r6, #32]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80015d6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80015da:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80015de:	62f5      	str	r5, [r6, #44]	; 0x2c
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80015e0:	6333      	str	r3, [r6, #48]	; 0x30
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 80015e2:	2904      	cmp	r1, #4
 80015e4:	d80a      	bhi.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
 80015e6:	e8df f001 	tbb	[pc, r1]
 80015ea:	636a      	.short	0x636a
 80015ec:	5c03      	.short	0x5c03
 80015ee:	55          	.byte	0x55
 80015ef:	00          	.byte	0x00
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
    }
    break;
  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80015f0:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
  __HAL_UNLOCK(hhrtim);  
 80015fc:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80015fe:	2201      	movs	r2, #1
 8001600:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);  
 8001604:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
  return HAL_OK; 
 8001608:	4618      	mov	r0, r3
 800160a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800160e:	6805      	ldr	r5, [r0, #0]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001610:	6957      	ldr	r7, [r2, #20]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001612:	682b      	ldr	r3, [r5, #0]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8001614:	6996      	ldr	r6, [r2, #24]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8001616:	69d4      	ldr	r4, [r2, #28]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001618:	6a11      	ldr	r1, [r2, #32]
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800161a:	f023 0320 	bic.w	r3, r3, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800161e:	433b      	orrs	r3, r7
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8001620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8001624:	4333      	orrs	r3, r6
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8001626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800162a:	4323      	orrs	r3, r4
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800162c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001630:	6a57      	ldr	r7, [r2, #36]	; 0x24
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001632:	6a94      	ldr	r4, [r2, #40]	; 0x28
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001634:	f8d5 63a0 	ldr.w	r6, [r5, #928]	; 0x3a0
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001638:	430b      	orrs	r3, r1
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800163a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800163e:	433b      	orrs	r3, r7
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001640:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001644:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001646:	6817      	ldr	r7, [r2, #0]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001648:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800164c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800164e:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001652:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001656:	430b      	orrs	r3, r1
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001658:	4334      	orrs	r4, r6
  hhrtim->Instance->sMasterRegs.MCR  = hrtim_mcr;
 800165a:	602b      	str	r3, [r5, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800165c:	f8c5 43a0 	str.w	r4, [r5, #928]	; 0x3a0
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8001660:	f8d5 3384 	ldr.w	r3, [r5, #900]	; 0x384
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001664:	6856      	ldr	r6, [r2, #4]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001666:	6894      	ldr	r4, [r2, #8]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001668:	68d1      	ldr	r1, [r2, #12]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800166a:	6912      	ldr	r2, [r2, #16]
 800166c:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8001670:	f043 0301 	orr.w	r3, r3, #1
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001674:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001678:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800167c:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001680:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8001684:	f8c5 3384 	str.w	r3, [r5, #900]	; 0x384
 8001688:	e7b8      	b.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800168a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800168e:	f43f af6a 	beq.w	8001566 <HAL_HRTIM_WaveformTimerConfig+0xf2>
 8001692:	e76b      	b.n	800156c <HAL_HRTIM_WaveformTimerConfig+0xf8>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
    }
    break;
  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8001694:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
 8001698:	f043 0320 	orr.w	r3, r3, #32
 800169c:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
 80016a0:	e7ac      	b.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80016a2:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
 80016ae:	e7a5      	b.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80016b0:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
 80016bc:	e79e      	b.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80016be:	f8d4 3384 	ldr.w	r3, [r4, #900]	; 0x384
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
 80016ca:	e797      	b.n	80015fc <HAL_HRTIM_WaveformTimerConfig+0x188>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80016cc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80016ce:	f42e 1e80 	bic.w	lr, lr, #1048576	; 0x100000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80016d2:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
 80016d6:	e765      	b.n	80015a4 <HAL_HRTIM_WaveformTimerConfig+0x130>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80016d8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80016da:	f42e 2e00 	bic.w	lr, lr, #524288	; 0x80000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80016de:	ea4e 0ec6 	orr.w	lr, lr, r6, lsl #3
 80016e2:	e75f      	b.n	80015a4 <HAL_HRTIM_WaveformTimerConfig+0x130>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80016e4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80016e6:	f42e 2e80 	bic.w	lr, lr, #262144	; 0x40000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80016ea:	ea4e 0e86 	orr.w	lr, lr, r6, lsl #2
 80016ee:	e759      	b.n	80015a4 <HAL_HRTIM_WaveformTimerConfig+0x130>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80016f0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80016f2:	f42e 3e00 	bic.w	lr, lr, #131072	; 0x20000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80016f6:	ea4e 0e46 	orr.w	lr, lr, r6, lsl #1
 80016fa:	e753      	b.n	80015a4 <HAL_HRTIM_WaveformTimerConfig+0x130>

080016fc <HAL_HRTIM_DeadTimeConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80016fc:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d02d      	beq.n	8001762 <HAL_HRTIM_DeadTimeConfig+0x66>
  __HAL_LOCK(hhrtim);
 8001706:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800170a:	2b01      	cmp	r3, #1
 800170c:	d028      	beq.n	8001760 <HAL_HRTIM_DeadTimeConfig+0x64>
{
 800170e:	b4f0      	push	{r4, r5, r6, r7}
  hrtim_dtr |= pDeadTimeCfg->FallingLock;
 8001710:	f102 0408 	add.w	r4, r2, #8
 8001714:	cc70      	ldmia	r4, {r4, r5, r6}
 8001716:	e892 0088 	ldmia.w	r2, {r3, r7}
 800171a:	433b      	orrs	r3, r7
 800171c:	4323      	orrs	r3, r4
 800171e:	4333      	orrs	r3, r6
 8001720:	6994      	ldr	r4, [r2, #24]
 8001722:	6a17      	ldr	r7, [r2, #32]
 8001724:	69d6      	ldr	r6, [r2, #28]
 8001726:	432b      	orrs	r3, r5
  hrtim_dtr |= (pDeadTimeCfg->FallingValue << 16U);
 8001728:	6955      	ldr	r5, [r2, #20]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800172a:	6802      	ldr	r2, [r0, #0]
 800172c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001730:	2202      	movs	r2, #2
 8001732:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
  hrtim_dtr |= pDeadTimeCfg->FallingLock;
 8001736:	4323      	orrs	r3, r4
 8001738:	433b      	orrs	r3, r7
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800173a:	f8d1 40b8 	ldr.w	r4, [r1, #184]	; 0xb8
  hrtim_dtr &= ~(HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_HRTIM_DeadTimeConfig+0x6c>)
  hrtim_dtr |= pDeadTimeCfg->FallingLock;
 8001740:	4333      	orrs	r3, r6
  hrtim_dtr &= ~(HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
 8001742:	4022      	ands	r2, r4
  hrtim_dtr |= pDeadTimeCfg->FallingLock;
 8001744:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001748:	4313      	orrs	r3, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800174a:	2401      	movs	r4, #1
  __HAL_UNLOCK(hhrtim);  
 800174c:	2200      	movs	r2, #0
  hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR = hrtim_dtr;
 800174e:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001752:	f880 40c1 	strb.w	r4, [r0, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);  
 8001756:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
}
 800175a:	bcf0      	pop	{r4, r5, r6, r7}
 800175c:	4610      	mov	r0, r2
 800175e:	4770      	bx	lr
     return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
}
 8001762:	4618      	mov	r0, r3
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	3c002000 	.word	0x3c002000

0800176c <HAL_HRTIM_WaveformCompareConfig>:
{
 800176c:	b430      	push	{r4, r5}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800176e:	f890 40c1 	ldrb.w	r4, [r0, #193]	; 0xc1
 8001772:	b2e4      	uxtb	r4, r4
 8001774:	2c02      	cmp	r4, #2
 8001776:	d03e      	beq.n	80017f6 <HAL_HRTIM_WaveformCompareConfig+0x8a>
  __HAL_LOCK(hhrtim);
 8001778:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
 800177c:	2c01      	cmp	r4, #1
 800177e:	d011      	beq.n	80017a4 <HAL_HRTIM_WaveformCompareConfig+0x38>
 8001780:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001782:	2402      	movs	r4, #2
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001784:	2905      	cmp	r1, #5
  __HAL_LOCK(hhrtim);
 8001786:	f880 50c0 	strb.w	r5, [r0, #192]	; 0xc0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800178a:	f880 40c1 	strb.w	r4, [r0, #193]	; 0xc1
    switch (CompareUnit)
 800178e:	f102 32ff 	add.w	r2, r2, #4294967295
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001792:	d033      	beq.n	80017fc <HAL_HRTIM_WaveformCompareConfig+0x90>
    switch (CompareUnit)
 8001794:	2a07      	cmp	r2, #7
 8001796:	d825      	bhi.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
 8001798:	e8df f002 	tbb	[pc, r2]
 800179c:	69244d46 	.word	0x69244d46
 80017a0:	07242424 	.word	0x07242424
     return HAL_BUSY;
 80017a4:	2002      	movs	r0, #2
}
 80017a6:	bc30      	pop	{r4, r5}
 80017a8:	4770      	bx	lr
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80017aa:	6802      	ldr	r2, [r0, #0]
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80017ac:	685c      	ldr	r4, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80017ae:	681d      	ldr	r5, [r3, #0]
 80017b0:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80017b4:	f8c1 50ac 	str.w	r5, [r1, #172]	; 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80017b8:	b1a4      	cbz	r4, 80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80017ba:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80017be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017c2:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80017c6:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80017ca:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80017ce:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80017d2:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80017d6:	d046      	beq.n	8001866 <HAL_HRTIM_WaveformCompareConfig+0xfa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80017d8:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80017dc:	bf04      	itt	eq
 80017de:	689b      	ldreq	r3, [r3, #8]
 80017e0:	f8c1 30a8 	streq.w	r3, [r1, #168]	; 0xa8
  __HAL_UNLOCK(hhrtim);  
 80017e4:	2400      	movs	r4, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80017e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hhrtim);  
 80017e8:	f880 40c0 	strb.w	r4, [r0, #192]	; 0xc0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80017ec:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  return HAL_OK; 
 80017f0:	4620      	mov	r0, r4
}
 80017f2:	bc30      	pop	{r4, r5}
 80017f4:	4770      	bx	lr
     return HAL_BUSY;
 80017f6:	4620      	mov	r0, r4
}
 80017f8:	bc30      	pop	{r4, r5}
 80017fa:	4770      	bx	lr
    switch (CompareUnit)
 80017fc:	2a07      	cmp	r2, #7
 80017fe:	d8f1      	bhi.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
 8001800:	a101      	add	r1, pc, #4	; (adr r1, 8001808 <HAL_HRTIM_WaveformCompareConfig+0x9c>)
 8001802:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001806:	bf00      	nop
 8001808:	0800188d 	.word	0x0800188d
 800180c:	08001885 	.word	0x08001885
 8001810:	080017e5 	.word	0x080017e5
 8001814:	0800187d 	.word	0x0800187d
 8001818:	080017e5 	.word	0x080017e5
 800181c:	080017e5 	.word	0x080017e5
 8001820:	080017e5 	.word	0x080017e5
 8001824:	08001895 	.word	0x08001895
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001828:	6802      	ldr	r2, [r0, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8001830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      break;
 8001834:	e7d6      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001836:	6802      	ldr	r2, [r0, #0]
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001838:	685c      	ldr	r4, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800183a:	681d      	ldr	r5, [r3, #0]
 800183c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8001840:	f8c1 50a4 	str.w	r5, [r1, #164]	; 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001844:	2c00      	cmp	r4, #0
 8001846:	d0cd      	beq.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001848:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 800184c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001850:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8001854:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001858:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800185c:	ea42 0204 	orr.w	r2, r2, r4
 8001860:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001864:	d1b8      	bne.n	80017d8 <HAL_HRTIM_WaveformCompareConfig+0x6c>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800186c:	e7ba      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800186e:	6802      	ldr	r2, [r0, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8001876:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      break;
 800187a:	e7b3      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800187c:	6802      	ldr	r2, [r0, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8001882:	e7af      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8001884:	6802      	ldr	r2, [r0, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800188a:	e7ab      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61d3      	str	r3, [r2, #28]
        break;
 8001892:	e7a7      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8001894:	6802      	ldr	r2, [r0, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800189a:	e7a3      	b.n	80017e4 <HAL_HRTIM_WaveformCompareConfig+0x78>

0800189c <HAL_HRTIM_WaveformOutputConfig>:
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800189e:	f890 40c1 	ldrb.w	r4, [r0, #193]	; 0xc1
 80018a2:	b2e4      	uxtb	r4, r4
 80018a4:	2c02      	cmp	r4, #2
 80018a6:	d004      	beq.n	80018b2 <HAL_HRTIM_WaveformOutputConfig+0x16>
  __HAL_LOCK(hhrtim);
 80018a8:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
 80018ac:	2c01      	cmp	r4, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_HRTIM_WaveformOutputConfig+0x1a>
     return HAL_BUSY;
 80018b0:	2402      	movs	r4, #2
}
 80018b2:	4620      	mov	r0, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80018b6:	6807      	ldr	r7, [r0, #0]
 80018b8:	01c9      	lsls	r1, r1, #7
 80018ba:	187c      	adds	r4, r7, r1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80018bc:	2502      	movs	r5, #2
 80018be:	f880 50c1 	strb.w	r5, [r0, #193]	; 0xc1
  __HAL_LOCK(hhrtim);
 80018c2:	2601      	movs	r6, #1
  switch (Output)
 80018c4:	2a10      	cmp	r2, #16
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80018c6:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
  __HAL_LOCK(hhrtim);
 80018ca:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80018ce:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
  switch (Output)
 80018d2:	d024      	beq.n	800191e <HAL_HRTIM_WaveformOutputConfig+0x82>
 80018d4:	d913      	bls.n	80018fe <HAL_HRTIM_WaveformOutputConfig+0x62>
 80018d6:	2a80      	cmp	r2, #128	; 0x80
 80018d8:	d006      	beq.n	80018e8 <HAL_HRTIM_WaveformOutputConfig+0x4c>
 80018da:	d91c      	bls.n	8001916 <HAL_HRTIM_WaveformOutputConfig+0x7a>
 80018dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80018e0:	d01d      	beq.n	800191e <HAL_HRTIM_WaveformOutputConfig+0x82>
 80018e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80018e6:	d111      	bne.n	800190c <HAL_HRTIM_WaveformOutputConfig+0x70>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80018e8:	187a      	adds	r2, r7, r1
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80018ea:	689e      	ldr	r6, [r3, #8]
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80018ec:	685c      	ldr	r4, [r3, #4]
 80018ee:	f8c2 40c4 	str.w	r4, [r2, #196]	; 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80018f2:	f46f 0c7e 	mvn.w	ip, #16646144	; 0xfe0000
 80018f6:	f8c2 60c8 	str.w	r6, [r2, #200]	; 0xc8
      shift = 16U;
 80018fa:	2610      	movs	r6, #16
 80018fc:	e019      	b.n	8001932 <HAL_HRTIM_WaveformOutputConfig+0x96>
  switch (Output)
 80018fe:	2a02      	cmp	r2, #2
 8001900:	d0f2      	beq.n	80018e8 <HAL_HRTIM_WaveformOutputConfig+0x4c>
 8001902:	d941      	bls.n	8001988 <HAL_HRTIM_WaveformOutputConfig+0xec>
 8001904:	2a04      	cmp	r2, #4
 8001906:	d00a      	beq.n	800191e <HAL_HRTIM_WaveformOutputConfig+0x82>
 8001908:	2a08      	cmp	r2, #8
 800190a:	d0ed      	beq.n	80018e8 <HAL_HRTIM_WaveformOutputConfig+0x4c>
 800190c:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
  uint32_t shift = 0xFFFFFFFFU;
 8001910:	f04f 36ff 	mov.w	r6, #4294967295
 8001914:	e00d      	b.n	8001932 <HAL_HRTIM_WaveformOutputConfig+0x96>
  switch (Output)
 8001916:	2a20      	cmp	r2, #32
 8001918:	d0e6      	beq.n	80018e8 <HAL_HRTIM_WaveformOutputConfig+0x4c>
 800191a:	2a40      	cmp	r2, #64	; 0x40
 800191c:	d1f6      	bne.n	800190c <HAL_HRTIM_WaveformOutputConfig+0x70>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800191e:	187a      	adds	r2, r7, r1
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001920:	689e      	ldr	r6, [r3, #8]
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8001922:	685c      	ldr	r4, [r3, #4]
 8001924:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001928:	f06f 0cfe 	mvn.w	ip, #254	; 0xfe
 800192c:	f8c2 60c0 	str.w	r6, [r2, #192]	; 0xc0
      shift = 0U;
 8001930:	2600      	movs	r6, #0
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8001932:	681a      	ldr	r2, [r3, #0]
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001934:	68dc      	ldr	r4, [r3, #12]
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8001936:	ea05 050c 	and.w	r5, r5, ip
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800193a:	40b2      	lsls	r2, r6
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800193c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8001940:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001942:	40b4      	lsls	r4, r6
 8001944:	4322      	orrs	r2, r4
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8001946:	695d      	ldr	r5, [r3, #20]
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8001948:	fa0c f406 	lsl.w	r4, ip, r6
 800194c:	4322      	orrs	r2, r4
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800194e:	699c      	ldr	r4, [r3, #24]
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8001950:	40b5      	lsls	r5, r6
 8001952:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8001954:	40b4      	lsls	r4, r6
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) && 
 8001956:	f1bc 0f08 	cmp.w	ip, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800195a:	ea42 0204 	orr.w	r2, r2, r4
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) && 
 800195e:	d00b      	beq.n	8001978 <HAL_HRTIM_WaveformOutputConfig+0xdc>
  __HAL_UNLOCK(hhrtim);  
 8001960:	2300      	movs	r3, #0
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8001962:	4439      	add	r1, r7
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001964:	2501      	movs	r5, #1
  return HAL_OK; 
 8001966:	461c      	mov	r4, r3
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8001968:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800196c:	f880 50c1 	strb.w	r5, [r0, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);  
 8001970:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
}
 8001974:	4620      	mov	r0, r4
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((hrtim_dtr & HRTIM_DTR_SDTR) == RESET) &&
 8001978:	f01e 2f02 	tst.w	lr, #33554944	; 0x2000200
 800197c:	d1f0      	bne.n	8001960 <HAL_HRTIM_WaveformOutputConfig+0xc4>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	fa03 f606 	lsl.w	r6, r3, r6
 8001984:	4332      	orrs	r2, r6
 8001986:	e7eb      	b.n	8001960 <HAL_HRTIM_WaveformOutputConfig+0xc4>
  switch (Output)
 8001988:	42b2      	cmp	r2, r6
 800198a:	d1bf      	bne.n	800190c <HAL_HRTIM_WaveformOutputConfig+0x70>
 800198c:	e7c7      	b.n	800191e <HAL_HRTIM_WaveformOutputConfig+0x82>
 800198e:	bf00      	nop

08001990 <HAL_HRTIM_WaveformOutputStart>:
  __HAL_LOCK(hhrtim);
 8001990:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
 8001994:	2a01      	cmp	r2, #1
 8001996:	d014      	beq.n	80019c2 <HAL_HRTIM_WaveformOutputStart+0x32>
 8001998:	4603      	mov	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY; 
 800199a:	2202      	movs	r2, #2
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800199c:	6800      	ldr	r0, [r0, #0]
{
 800199e:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY; 
 80019a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80019a4:	f8d0 2394 	ldr.w	r2, [r0, #916]	; 0x394
  hhrtim->State = HAL_HRTIM_STATE_READY; 
 80019a8:	2401      	movs	r4, #1
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80019aa:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hhrtim);      
 80019ac:	2200      	movs	r2, #0
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80019ae:	f8c0 1394 	str.w	r1, [r0, #916]	; 0x394
  return HAL_OK;
 80019b2:	4610      	mov	r0, r2
  hhrtim->State = HAL_HRTIM_STATE_READY; 
 80019b4:	f883 40c1 	strb.w	r4, [r3, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);      
 80019b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 80019bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019c0:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 80019c2:	2002      	movs	r0, #2
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_HRTIM_WaveformCounterStart_IT>:
  __HAL_LOCK(hhrtim);
 80019c8:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
 80019cc:	2a01      	cmp	r2, #1
 80019ce:	d04a      	beq.n	8001a66 <HAL_HRTIM_WaveformCounterStart_IT+0x9e>
 80019d0:	4603      	mov	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80019d2:	2002      	movs	r0, #2
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80019d4:	681a      	ldr	r2, [r3, #0]
{
 80019d6:	b430      	push	{r4, r5}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80019d8:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80019dc:	f8d2 0390 	ldr.w	r0, [r2, #912]	; 0x390
 80019e0:	685d      	ldr	r5, [r3, #4]
  __HAL_LOCK(hhrtim);
 80019e2:	2401      	movs	r4, #1
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80019e4:	4328      	orrs	r0, r5
  if ((Timers & HRTIM_TIMERID_MASTER) != RESET)
 80019e6:	03cd      	lsls	r5, r1, #15
  __HAL_LOCK(hhrtim);
 80019e8:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80019ec:	f8c2 0390 	str.w	r0, [r2, #912]	; 0x390
  if ((Timers & HRTIM_TIMERID_MASTER) != RESET)
 80019f0:	d504      	bpl.n	80019fc <HAL_HRTIM_WaveformCounterStart_IT+0x34>
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim, 
 80019f2:	68d0      	ldr	r0, [r2, #12]
 80019f4:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 80019f8:	4320      	orrs	r0, r4
 80019fa:	60d0      	str	r0, [r2, #12]
    if ((Timers & TimerIdxToTimerId[timer_idx]) != RESET)
 80019fc:	038c      	lsls	r4, r1, #14
 80019fe:	d505      	bpl.n	8001a0c <HAL_HRTIM_WaveformCounterStart_IT+0x44>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, 
 8001a00:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001a04:	6a1c      	ldr	r4, [r3, #32]
 8001a06:	4320      	orrs	r0, r4
 8001a08:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != RESET)
 8001a0c:	0348      	lsls	r0, r1, #13
 8001a0e:	d505      	bpl.n	8001a1c <HAL_HRTIM_WaveformCounterStart_IT+0x54>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, 
 8001a10:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8001a14:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001a16:	4320      	orrs	r0, r4
 8001a18:	f8c2 010c 	str.w	r0, [r2, #268]	; 0x10c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != RESET)
 8001a1c:	030d      	lsls	r5, r1, #12
 8001a1e:	d505      	bpl.n	8001a2c <HAL_HRTIM_WaveformCounterStart_IT+0x64>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, 
 8001a20:	f8d2 018c 	ldr.w	r0, [r2, #396]	; 0x18c
 8001a24:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001a26:	4320      	orrs	r0, r4
 8001a28:	f8c2 018c 	str.w	r0, [r2, #396]	; 0x18c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != RESET)
 8001a2c:	02cc      	lsls	r4, r1, #11
 8001a2e:	d505      	bpl.n	8001a3c <HAL_HRTIM_WaveformCounterStart_IT+0x74>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, 
 8001a30:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8001a34:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001a36:	4320      	orrs	r0, r4
 8001a38:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != RESET)
 8001a3c:	0288      	lsls	r0, r1, #10
 8001a3e:	d506      	bpl.n	8001a4e <HAL_HRTIM_WaveformCounterStart_IT+0x86>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, 
 8001a40:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
 8001a44:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8001a48:	4320      	orrs	r0, r4
 8001a4a:	f8c2 028c 	str.w	r0, [r2, #652]	; 0x28c
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8001a4e:	6810      	ldr	r0, [r2, #0]
  __HAL_UNLOCK(hhrtim);      
 8001a50:	2400      	movs	r4, #0
  hhrtim->State = HAL_HRTIM_STATE_READY; 
 8001a52:	2501      	movs	r5, #1
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8001a54:	4301      	orrs	r1, r0
 8001a56:	6011      	str	r1, [r2, #0]
  return HAL_OK;}
 8001a58:	4620      	mov	r0, r4
  hhrtim->State = HAL_HRTIM_STATE_READY; 
 8001a5a:	f883 50c1 	strb.w	r5, [r3, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);      
 8001a5e:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
  return HAL_OK;}
 8001a62:	bc30      	pop	{r4, r5}
 8001a64:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8001a66:	2002      	movs	r0, #2
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	f000 82cb 	beq.w	8002008 <HAL_RCC_OscConfig+0x59c>
{
 8001a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	6803      	ldr	r3, [r0, #0]
 8001a78:	07d9      	lsls	r1, r3, #31
{
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	d543      	bpl.n	8001b08 <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a80:	49b7      	ldr	r1, [pc, #732]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001a82:	684a      	ldr	r2, [r1, #4]
 8001a84:	f002 020c 	and.w	r2, r2, #12
 8001a88:	2a04      	cmp	r2, #4
 8001a8a:	f000 81b0 	beq.w	8001dee <HAL_RCC_OscConfig+0x382>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8e:	684a      	ldr	r2, [r1, #4]
 8001a90:	f002 020c 	and.w	r2, r2, #12
 8001a94:	2a08      	cmp	r2, #8
 8001a96:	f000 81a6 	beq.w	8001de6 <HAL_RCC_OscConfig+0x37a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	f000 8218 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x468>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8161 	beq.w	8001d6c <HAL_RCC_OscConfig+0x300>
 8001aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aae:	f000 829e 	beq.w	8001fee <HAL_RCC_OscConfig+0x582>
 8001ab2:	4bab      	ldr	r3, [pc, #684]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac2:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac4:	4da6      	ldr	r5, [pc, #664]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001ac6:	68a2      	ldr	r2, [r4, #8]
 8001ac8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001aca:	f023 030f 	bic.w	r3, r3, #15
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fcb7 	bl	8000444 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001ada:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001adc:	2601      	movs	r6, #1
 8001ade:	e005      	b.n	8001aec <HAL_RCC_OscConfig+0x80>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7fe fcb0 	bl	8000444 <HAL_GetTick>
 8001ae4:	1bc0      	subs	r0, r0, r7
 8001ae6:	2864      	cmp	r0, #100	; 0x64
 8001ae8:	f200 8179 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001aec:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af0:	682a      	ldr	r2, [r5, #0]
 8001af2:	fa98 f3a8 	rbit	r3, r8
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa06 f303 	lsl.w	r3, r6, r3
 8001b02:	4213      	tst	r3, r2
 8001b04:	d0ec      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x74>
 8001b06:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b08:	079f      	lsls	r7, r3, #30
 8001b0a:	d542      	bpl.n	8001b92 <HAL_RCC_OscConfig+0x126>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b0c:	4a94      	ldr	r2, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001b0e:	6851      	ldr	r1, [r2, #4]
 8001b10:	f011 0f0c 	tst.w	r1, #12
 8001b14:	f000 80c9 	beq.w	8001caa <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b18:	6851      	ldr	r1, [r2, #4]
 8001b1a:	f001 010c 	and.w	r1, r1, #12
 8001b1e:	2908      	cmp	r1, #8
 8001b20:	f000 80bf 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	6922      	ldr	r2, [r4, #16]
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	f000 81ae 	beq.w	8001e88 <HAL_RCC_OscConfig+0x41c>
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8001b42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b44:	f7fe fc7e 	bl	8000444 <HAL_GetTick>
 8001b48:	f04f 0802 	mov.w	r8, #2
 8001b4c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4d84      	ldr	r5, [pc, #528]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001b50:	e005      	b.n	8001b5e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b52:	f7fe fc77 	bl	8000444 <HAL_GetTick>
 8001b56:	1bc0      	subs	r0, r0, r7
 8001b58:	2802      	cmp	r0, #2
 8001b5a:	f200 8140 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001b5e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	682a      	ldr	r2, [r5, #0]
 8001b64:	fa98 f3a8 	rbit	r3, r8
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa06 f303 	lsl.w	r3, r6, r3
 8001b74:	4213      	tst	r3, r2
 8001b76:	d0ec      	beq.n	8001b52 <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	6829      	ldr	r1, [r5, #0]
 8001b7a:	22f8      	movs	r2, #248	; 0xf8
 8001b7c:	fa92 f2a2 	rbit	r2, r2
 8001b80:	6963      	ldr	r3, [r4, #20]
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	071d      	lsls	r5, r3, #28
 8001b94:	d421      	bmi.n	8001bda <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	0758      	lsls	r0, r3, #29
 8001b98:	d54d      	bpl.n	8001c36 <HAL_RCC_OscConfig+0x1ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	00d1      	lsls	r1, r2, #3
 8001ba0:	f140 80c1 	bpl.w	8001d26 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4d6e      	ldr	r5, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x2f8>)
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	05da      	lsls	r2, r3, #23
 8001bae:	f140 8106 	bpl.w	8001dbe <HAL_RCC_OscConfig+0x352>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	68e3      	ldr	r3, [r4, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f000 8193 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x474>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 812e 	beq.w	8001e1c <HAL_RCC_OscConfig+0x3b0>
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001bc4:	6a1a      	ldr	r2, [r3, #32]
 8001bc6:	f000 81b5 	beq.w	8001f34 <HAL_RCC_OscConfig+0x4c8>
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	621a      	str	r2, [r3, #32]
 8001bd0:	6a1a      	ldr	r2, [r3, #32]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	621a      	str	r2, [r3, #32]
 8001bd8:	e187      	b.n	8001eea <HAL_RCC_OscConfig+0x47e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bda:	69a2      	ldr	r2, [r4, #24]
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d07b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x26c>
 8001be0:	2201      	movs	r2, #1
 8001be2:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be8:	4e5d      	ldr	r6, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 8001bea:	fab1 f181 	clz	r1, r1
 8001bee:	440b      	add	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8001bf4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fc25 	bl	8000444 <HAL_GetTick>
 8001bfa:	f04f 0802 	mov.w	r8, #2
 8001bfe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c00:	e005      	b.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fc1f 	bl	8000444 <HAL_GetTick>
 8001c06:	1bc0      	subs	r0, r0, r7
 8001c08:	2802      	cmp	r0, #2
 8001c0a:	f200 80e8 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001c0e:	fa98 f3a8 	rbit	r3, r8
 8001c12:	fa98 f3a8 	rbit	r3, r8
 8001c16:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001c1c:	fa98 f3a8 	rbit	r3, r8
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa05 f303 	lsl.w	r3, r5, r3
 8001c2c:	4213      	tst	r3, r2
 8001c2e:	d0e8      	beq.n	8001c02 <HAL_RCC_OscConfig+0x196>
 8001c30:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c32:	0758      	lsls	r0, r3, #29
 8001c34:	d4b1      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x12e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	69e3      	ldr	r3, [r4, #28]
 8001c38:	b37b      	cbz	r3, 8001c9a <HAL_RCC_OscConfig+0x22e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3a:	4d49      	ldr	r5, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001c3c:	686a      	ldr	r2, [r5, #4]
 8001c3e:	f002 020c 	and.w	r2, r2, #12
 8001c42:	2a08      	cmp	r2, #8
 8001c44:	d044      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x264>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4c:	f000 817a 	beq.w	8001f44 <HAL_RCC_OscConfig+0x4d8>
 8001c50:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7fe fbed 	bl	8000444 <HAL_GetTick>
 8001c6a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001c6e:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	2601      	movs	r6, #1
 8001c72:	e005      	b.n	8001c80 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe fbe6 	bl	8000444 <HAL_GetTick>
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	f200 80af 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001c80:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	682a      	ldr	r2, [r5, #0]
 8001c86:	fa94 f3a4 	rbit	r3, r4
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa06 f303 	lsl.w	r3, r6, r3
 8001c96:	4213      	tst	r3, r2
 8001c98:	d1ec      	bne.n	8001c74 <HAL_RCC_OscConfig+0x208>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
}
 8001c9c:	b003      	add	sp, #12
 8001c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	03d6      	lsls	r6, r2, #15
 8001ca6:	f53f af3d 	bmi.w	8001b24 <HAL_RCC_OscConfig+0xb8>
 8001caa:	2202      	movs	r2, #2
 8001cac:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb0:	492b      	ldr	r1, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001cb2:	6808      	ldr	r0, [r1, #0]
 8001cb4:	fa92 f2a2 	rbit	r2, r2
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4202      	tst	r2, r0
 8001cc8:	d039      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2d2>
 8001cca:	6922      	ldr	r2, [r4, #16]
 8001ccc:	428a      	cmp	r2, r1
 8001cce:	d036      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2d2>
    return HAL_ERROR;
 8001cd0:	2001      	movs	r0, #1
}
 8001cd2:	b003      	add	sp, #12
 8001cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cd8:	2501      	movs	r5, #1
 8001cda:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4e1f      	ldr	r6, [pc, #124]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	fab1 f181 	clz	r1, r1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f04f 0802 	mov.w	r8, #2
 8001cee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fba8 	bl	8000444 <HAL_GetTick>
 8001cf4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fba4 	bl	8000444 <HAL_GetTick>
 8001cfc:	1bc0      	subs	r0, r0, r7
 8001cfe:	2802      	cmp	r0, #2
 8001d00:	d86d      	bhi.n	8001dde <HAL_RCC_OscConfig+0x372>
 8001d02:	fa98 f3a8 	rbit	r3, r8
 8001d06:	fa98 f3a8 	rbit	r3, r8
 8001d0a:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d10:	fa98 f3a8 	rbit	r3, r8
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa05 f303 	lsl.w	r3, r5, r3
 8001d20:	4213      	tst	r3, r2
 8001d22:	d1e9      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x28c>
 8001d24:	e784      	b.n	8001c30 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2c:	61da      	str	r2, [r3, #28]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d38:	f04f 0801 	mov.w	r8, #1
 8001d3c:	e734      	b.n	8001ba8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	4d08      	ldr	r5, [pc, #32]	; (8001d60 <HAL_RCC_OscConfig+0x2f4>)
 8001d40:	21f8      	movs	r1, #248	; 0xf8
 8001d42:	6828      	ldr	r0, [r5, #0]
 8001d44:	fa91 f1a1 	rbit	r1, r1
 8001d48:	6962      	ldr	r2, [r4, #20]
 8001d4a:	fab1 f181 	clz	r1, r1
 8001d4e:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001d52:	408a      	lsls	r2, r1
 8001d54:	4302      	orrs	r2, r0
 8001d56:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d58:	071d      	lsls	r5, r3, #28
 8001d5a:	f57f af1c 	bpl.w	8001b96 <HAL_RCC_OscConfig+0x12a>
 8001d5e:	e73c      	b.n	8001bda <HAL_RCC_OscConfig+0x16e>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
 8001d68:	10908120 	.word	0x10908120
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	4da7      	ldr	r5, [pc, #668]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	682b      	ldr	r3, [r5, #0]
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d80:	68a2      	ldr	r2, [r4, #8]
 8001d82:	f023 030f 	bic.w	r3, r3, #15
 8001d86:	4313      	orrs	r3, r2
 8001d88:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fb5b 	bl	8000444 <HAL_GetTick>
 8001d8e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001d92:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d94:	2601      	movs	r6, #1
 8001d96:	e004      	b.n	8001da2 <HAL_RCC_OscConfig+0x336>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7fe fb54 	bl	8000444 <HAL_GetTick>
 8001d9c:	1bc0      	subs	r0, r0, r7
 8001d9e:	2864      	cmp	r0, #100	; 0x64
 8001da0:	d81d      	bhi.n	8001dde <HAL_RCC_OscConfig+0x372>
 8001da2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	682a      	ldr	r2, [r5, #0]
 8001da8:	fa98 f3a8 	rbit	r3, r8
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa06 f303 	lsl.w	r3, r6, r3
 8001db8:	4213      	tst	r3, r2
 8001dba:	d1ed      	bne.n	8001d98 <HAL_RCC_OscConfig+0x32c>
 8001dbc:	e6a3      	b.n	8001b06 <HAL_RCC_OscConfig+0x9a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001dc6:	f7fe fb3d 	bl	8000444 <HAL_GetTick>
 8001dca:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	f53f aeef 	bmi.w	8001bb2 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7fe fb36 	bl	8000444 <HAL_GetTick>
 8001dd8:	1b80      	subs	r0, r0, r6
 8001dda:	2864      	cmp	r0, #100	; 0x64
 8001ddc:	d9f6      	bls.n	8001dcc <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
}
 8001de0:	b003      	add	sp, #12
 8001de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de6:	684a      	ldr	r2, [r1, #4]
 8001de8:	03d2      	lsls	r2, r2, #15
 8001dea:	f57f ae56 	bpl.w	8001a9a <HAL_RCC_OscConfig+0x2e>
 8001dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4985      	ldr	r1, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001df8:	6808      	ldr	r0, [r1, #0]
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4202      	tst	r2, r0
 8001e0e:	f43f ae7b 	beq.w	8001b08 <HAL_RCC_OscConfig+0x9c>
 8001e12:	6862      	ldr	r2, [r4, #4]
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	f47f ae77 	bne.w	8001b08 <HAL_RCC_OscConfig+0x9c>
 8001e1a:	e759      	b.n	8001cd0 <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	4d7b      	ldr	r5, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001e1e:	6a2b      	ldr	r3, [r5, #32]
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	622b      	str	r3, [r5, #32]
 8001e26:	6a2b      	ldr	r3, [r5, #32]
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e2e:	f7fe fb09 	bl	8000444 <HAL_GetTick>
 8001e32:	f04f 0902 	mov.w	r9, #2
 8001e36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	2601      	movs	r6, #1
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x3f8>
 8001e3c:	fa99 f3a9 	rbit	r3, r9
 8001e40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e42:	fa99 f3a9 	rbit	r3, r9
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	fa06 f303 	lsl.w	r3, r6, r3
 8001e52:	4213      	tst	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe faf5 	bl	8000444 <HAL_GetTick>
 8001e5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e5e:	1bc0      	subs	r0, r0, r7
 8001e60:	4298      	cmp	r0, r3
 8001e62:	d8bc      	bhi.n	8001dde <HAL_RCC_OscConfig+0x372>
 8001e64:	fa99 f3a9 	rbit	r3, r9
 8001e68:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0e5      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3d0>
 8001e70:	6a2a      	ldr	r2, [r5, #32]
 8001e72:	e7e6      	b.n	8001e42 <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8001e74:	f1b8 0f00 	cmp.w	r8, #0
 8001e78:	f43f aedd 	beq.w	8001c36 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001e7e:	69d3      	ldr	r3, [r2, #28]
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	e6d6      	b.n	8001c36 <HAL_RCC_OscConfig+0x1ca>
 8001e88:	2501      	movs	r5, #1
 8001e8a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f04f 0802 	mov.w	r8, #2
 8001ea0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ea2:	f7fe facf 	bl	8000444 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4e59      	ldr	r6, [pc, #356]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001ea8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7fe faca 	bl	8000444 <HAL_GetTick>
 8001eb0:	1bc0      	subs	r0, r0, r7
 8001eb2:	2802      	cmp	r0, #2
 8001eb4:	d893      	bhi.n	8001dde <HAL_RCC_OscConfig+0x372>
 8001eb6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	6832      	ldr	r2, [r6, #0]
 8001ebc:	fa98 f3a8 	rbit	r3, r8
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa05 f303 	lsl.w	r3, r5, r3
 8001ecc:	4213      	tst	r3, r2
 8001ece:	d1ed      	bne.n	8001eac <HAL_RCC_OscConfig+0x440>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	e65e      	b.n	8001b92 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	4a4d      	ldr	r2, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e5f1      	b.n	8001ac4 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001ee2:	6a13      	ldr	r3, [r2, #32]
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001eea:	f7fe faab 	bl	8000444 <HAL_GetTick>
 8001eee:	f04f 0902 	mov.w	r9, #2
 8001ef2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	4e45      	ldr	r6, [pc, #276]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
 8001ef6:	2501      	movs	r5, #1
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
 8001efa:	fa99 f3a9 	rbit	r3, r9
 8001efe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001f00:	fa99 f3a9 	rbit	r3, r9
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa05 f303 	lsl.w	r3, r5, r3
 8001f10:	4213      	tst	r3, r2
 8001f12:	d1af      	bne.n	8001e74 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7fe fa96 	bl	8000444 <HAL_GetTick>
 8001f18:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f1c:	1bc0      	subs	r0, r0, r7
 8001f1e:	4298      	cmp	r0, r3
 8001f20:	f63f af5d 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001f24:	fa99 f3a9 	rbit	r3, r9
 8001f28:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0e4      	beq.n	8001efa <HAL_RCC_OscConfig+0x48e>
 8001f30:	6a32      	ldr	r2, [r6, #32]
 8001f32:	e7e5      	b.n	8001f00 <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	f042 0204 	orr.w	r2, r2, #4
 8001f38:	621a      	str	r2, [r3, #32]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	621a      	str	r2, [r3, #32]
 8001f42:	e7d2      	b.n	8001eea <HAL_RCC_OscConfig+0x47e>
 8001f44:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fa73 	bl	8000444 <HAL_GetTick>
 8001f5e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001f62:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	2601      	movs	r6, #1
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_OscConfig+0x508>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe fa6c 	bl	8000444 <HAL_GetTick>
 8001f6c:	1bc0      	subs	r0, r0, r7
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	f63f af35 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001f74:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	682a      	ldr	r2, [r5, #0]
 8001f7a:	fa98 f3a8 	rbit	r3, r8
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	fa06 f303 	lsl.w	r3, r6, r3
 8001f8a:	4213      	tst	r3, r2
 8001f8c:	d1ec      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8e:	686a      	ldr	r2, [r5, #4]
 8001f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f92:	6a21      	ldr	r1, [r4, #32]
 8001f94:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	606b      	str	r3, [r5, #4]
 8001f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001fb8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001fba:	f7fe fa43 	bl	8000444 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbe:	4e13      	ldr	r6, [pc, #76]	; (800200c <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001fc0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc2:	2501      	movs	r5, #1
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe fa3d 	bl	8000444 <HAL_GetTick>
 8001fca:	1bc0      	subs	r0, r0, r7
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	f63f af06 	bhi.w	8001dde <HAL_RCC_OscConfig+0x372>
 8001fd2:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd6:	6832      	ldr	r2, [r6, #0]
 8001fd8:	fa94 f3a4 	rbit	r3, r4
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa05 f303 	lsl.w	r3, r5, r3
 8001fe8:	4213      	tst	r3, r2
 8001fea:	d0ec      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x55a>
 8001fec:	e655      	b.n	8001c9a <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ff2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e55d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
}
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002010:	b178      	cbz	r0, 8002032 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x198>)
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	428b      	cmp	r3, r1
 800201c:	d20b      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	f023 0307 	bic.w	r3, r3, #7
 8002024:	430b      	orrs	r3, r1
 8002026:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002028:	6813      	ldr	r3, [r2, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	4299      	cmp	r1, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002034:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002036:	6803      	ldr	r3, [r0, #0]
{
 8002038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	079f      	lsls	r7, r3, #30
 800203e:	d506      	bpl.n	800204e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4c5a      	ldr	r4, [pc, #360]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 8002042:	6885      	ldr	r5, [r0, #8]
 8002044:	6862      	ldr	r2, [r4, #4]
 8002046:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800204a:	432a      	orrs	r2, r5
 800204c:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	07de      	lsls	r6, r3, #31
 8002050:	4604      	mov	r4, r0
 8002052:	460d      	mov	r5, r1
 8002054:	d530      	bpl.n	80020b8 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	6842      	ldr	r2, [r0, #4]
 8002058:	2a01      	cmp	r2, #1
 800205a:	f000 8093 	beq.w	8002184 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	2a02      	cmp	r2, #2
 8002060:	bf0c      	ite	eq
 8002062:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002066:	2302      	movne	r3, #2
 8002068:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	494f      	ldr	r1, [pc, #316]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 800206e:	6808      	ldr	r0, [r1, #0]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	4203      	tst	r3, r0
 8002084:	d028      	beq.n	80020d8 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4e49      	ldr	r6, [pc, #292]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 8002088:	6873      	ldr	r3, [r6, #4]
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	4313      	orrs	r3, r2
 8002090:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002092:	f7fe f9d7 	bl	8000444 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800209a:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209c:	e005      	b.n	80020aa <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209e:	f7fe f9d1 	bl	8000444 <HAL_GetTick>
 80020a2:	eba0 0008 	sub.w	r0, r0, r8
 80020a6:	42b8      	cmp	r0, r7
 80020a8:	d869      	bhi.n	800217e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	6873      	ldr	r3, [r6, #4]
 80020ac:	6862      	ldr	r2, [r4, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020b6:	d1f2      	bne.n	800209e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_RCC_ClockConfig+0x198>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	429d      	cmp	r5, r3
 80020c2:	d20c      	bcs.n	80020de <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f023 0307 	bic.w	r3, r3, #7
 80020ca:	432b      	orrs	r3, r5
 80020cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	429d      	cmp	r5, r3
 80020d6:	d002      	beq.n	80020de <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
 80020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	0758      	lsls	r0, r3, #29
 80020e2:	d506      	bpl.n	80020f2 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4931      	ldr	r1, [pc, #196]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 80020e6:	68e0      	ldr	r0, [r4, #12]
 80020e8:	684a      	ldr	r2, [r1, #4]
 80020ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ee:	4302      	orrs	r2, r0
 80020f0:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	0719      	lsls	r1, r3, #28
 80020f4:	d507      	bpl.n	8002106 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 80020f8:	6921      	ldr	r1, [r4, #16]
 80020fa:	6853      	ldr	r3, [r2, #4]
 80020fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002100:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002104:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 8002108:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800210a:	f002 010c 	and.w	r1, r2, #12
 800210e:	2908      	cmp	r1, #8
 8002110:	d016      	beq.n	8002140 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002112:	4927      	ldr	r1, [pc, #156]	; (80021b0 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 8002116:	22f0      	movs	r2, #240	; 0xf0
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4822      	ldr	r0, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1a4>)
 800212a:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_RCC_ClockConfig+0x1a8>)
 800212c:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002130:	fa21 f303 	lsr.w	r3, r1, r3
 8002134:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002136:	f7fe f945 	bl	80003c4 <HAL_InitTick>
  return HAL_OK;
 800213a:	2000      	movs	r0, #0
 800213c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002140:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8002144:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002148:	fab1 f181 	clz	r1, r1
 800214c:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8002150:	40c8      	lsrs	r0, r1
 8002152:	4c1a      	ldr	r4, [pc, #104]	; (80021bc <HAL_RCC_ClockConfig+0x1ac>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002156:	5c23      	ldrb	r3, [r4, r0]
 8002158:	200f      	movs	r0, #15
 800215a:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800215e:	fab0 f080 	clz	r0, r0
 8002162:	f001 010f 	and.w	r1, r1, #15
 8002166:	40c1      	lsrs	r1, r0
 8002168:	4421      	add	r1, r4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800216a:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800216c:	7c08      	ldrb	r0, [r1, #16]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800216e:	bf4a      	itet	mi
 8002170:	490f      	ldrmi	r1, [pc, #60]	; (80021b0 <HAL_RCC_ClockConfig+0x1a0>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002172:	4913      	ldrpl	r1, [pc, #76]	; (80021c0 <HAL_RCC_ClockConfig+0x1b0>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002174:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002178:	fb01 f103 	mul.w	r1, r1, r3
 800217c:	e7ca      	b.n	8002114 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800217e:	2003      	movs	r0, #3
}
 8002180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002188:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <HAL_RCC_ClockConfig+0x19c>)
 800218e:	6809      	ldr	r1, [r1, #0]
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	420b      	tst	r3, r1
 80021a2:	f47f af70 	bne.w	8002086 <HAL_RCC_ClockConfig+0x76>
 80021a6:	e797      	b.n	80020d8 <HAL_RCC_ClockConfig+0xc8>
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	08002920 	.word	0x08002920
 80021b8:	20000014 	.word	0x20000014
 80021bc:	08002938 	.word	0x08002938
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	03c5      	lsls	r5, r0, #15
{
 80021ce:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d0:	d538      	bpl.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b5a      	ldr	r3, [pc, #360]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	00d1      	lsls	r1, r2, #3
 80021d8:	d567      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4d59      	ldr	r5, [pc, #356]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 80021e0:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	d570      	bpl.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e6:	4d55      	ldr	r5, [pc, #340]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021e8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021ee:	d01f      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80021f0:	6861      	ldr	r1, [r4, #4]
 80021f2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01b      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021fa:	6a29      	ldr	r1, [r5, #32]
 80021fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002200:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002204:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4f4e      	ldr	r7, [pc, #312]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	443a      	add	r2, r7
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	f04f 0e01 	mov.w	lr, #1
 8002216:	f8c2 e000 	str.w	lr, [r2]
 800221a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	443b      	add	r3, r7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002228:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222a:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800222c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800222e:	d461      	bmi.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002230:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002232:	4a42      	ldr	r2, [pc, #264]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002234:	6a13      	ldr	r3, [r2, #32]
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	430b      	orrs	r3, r1
 800223c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800223e:	2e00      	cmp	r6, #0
 8002240:	d153      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x126>
 8002242:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002244:	07c5      	lsls	r5, r0, #31
 8002246:	d506      	bpl.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002248:	4a3c      	ldr	r2, [pc, #240]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800224a:	68a1      	ldr	r1, [r4, #8]
 800224c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	430b      	orrs	r3, r1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002256:	0681      	lsls	r1, r0, #26
 8002258:	d506      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800225c:	68e1      	ldr	r1, [r4, #12]
 800225e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002260:	f023 0310 	bic.w	r3, r3, #16
 8002264:	430b      	orrs	r3, r1
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002268:	0602      	lsls	r2, r0, #24
 800226a:	d506      	bpl.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800226c:	4a33      	ldr	r2, [pc, #204]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800226e:	6921      	ldr	r1, [r4, #16]
 8002270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002272:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002276:	430b      	orrs	r3, r1
 8002278:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800227a:	04c3      	lsls	r3, r0, #19
 800227c:	d40d      	bmi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800227e:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8002282:	d007      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002286:	69a1      	ldr	r1, [r4, #24]
 8002288:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800228a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228e:	430b      	orrs	r3, r1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002292:	2000      	movs	r0, #0
}
 8002294:	b003      	add	sp, #12
 8002296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800229a:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800229c:	6961      	ldr	r1, [r4, #20]
 800229e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	e7e9      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4d24      	ldr	r5, [pc, #144]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022b2:	61da      	str	r2, [r3, #28]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	682b      	ldr	r3, [r5, #0]
 80022c0:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80022c2:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	d48e      	bmi.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80022d0:	f7fe f8b8 	bl	8000444 <HAL_GetTick>
 80022d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	682b      	ldr	r3, [r5, #0]
 80022d8:	05db      	lsls	r3, r3, #23
 80022da:	d484      	bmi.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe f8b2 	bl	8000444 <HAL_GetTick>
 80022e0:	1bc0      	subs	r0, r0, r7
 80022e2:	2864      	cmp	r0, #100	; 0x64
 80022e4:	d9f7      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e7d4      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	69d3      	ldr	r3, [r2, #28]
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	e7a6      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 80022f6:	f7fe f8a5 	bl	8000444 <HAL_GetTick>
 80022fa:	f04f 0902 	mov.w	r9, #2
 80022fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e014      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002302:	fa99 f3a9 	rbit	r3, r9
 8002306:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002308:	fa99 f3a9 	rbit	r3, r9
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa07 f303 	lsl.w	r3, r7, r3
 8002318:	4213      	tst	r3, r2
 800231a:	d189      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7fe f892 	bl	8000444 <HAL_GetTick>
 8002320:	f241 3388 	movw	r3, #5000	; 0x1388
 8002324:	eba0 0008 	sub.w	r0, r0, r8
 8002328:	4298      	cmp	r0, r3
 800232a:	d8dc      	bhi.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800232c:	fa99 f3a9 	rbit	r3, r9
 8002330:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0e4      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002338:	6a2a      	ldr	r2, [r5, #32]
 800233a:	e7e5      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	10908100 	.word	0x10908100

08002348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800234c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800234e:	e003      	b.n	8002358 <LoopCopyDataInit>

08002350 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002352:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002354:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002356:	3104      	adds	r1, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002358:	480b      	ldr	r0, [pc, #44]	; (8002388 <LoopForever+0xa>)
	ldr	r3, =_edata
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <LoopForever+0xe>)
	adds	r2, r0, r1
 800235c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800235e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002360:	d3f6      	bcc.n	8002350 <CopyDataInit>
	ldr	r2, =_sbss
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002364:	e002      	b.n	800236c <LoopFillZerobss>

08002366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002366:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002368:	f842 3b04 	str.w	r3, [r2], #4

0800236c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <LoopForever+0x16>)
	cmp	r2, r3
 800236e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002370:	d3f9      	bcc.n	8002366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002372:	f7fd ffed 	bl	8000350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f000 fa9b 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800237a:	f000 f80f 	bl	800239c <main>

0800237e <LoopForever>:

LoopForever:
    b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002380:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002384:	08002960 	.word	0x08002960
	ldr	r0, =_sdata
 8002388:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800238c:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8002390:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8002394:	20000178 	.word	0x20000178

08002398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC1_2_IRQHandler>
	...

0800239c <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 800239c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80023a0:	b0b5      	sub	sp, #212	; 0xd4
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 80023a2:	f7fe f831 	bl	8000408 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a6:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023ac:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ae:	f04f 0802 	mov.w	r8, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80023b6:	a81f      	add	r0, sp, #124	; 0x7c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b8:	971f      	str	r7, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ba:	9220      	str	r2, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023bc:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023be:	9521      	str	r5, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c0:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023c4:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80023c6:	f7ff fb51 	bl	8001a6c <HAL_RCC_OscConfig>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f040 81c4 	bne.w	8002758 <main+0x3bc>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80023d0:	230f      	movs	r3, #15
 80023d2:	4604      	mov	r4, r0
 80023d4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80023d6:	a816      	add	r0, sp, #88	; 0x58
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80023d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80023dc:	4641      	mov	r1, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e2:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e4:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80023e6:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80023e8:	f7ff fe12 	bl	8002010 <HAL_RCC_ClockConfig>
 80023ec:	4683      	mov	fp, r0
 80023ee:	2800      	cmp	r0, #0
 80023f0:	f040 81ae 	bne.w	8002750 <main+0x3b4>
  BSP_LED_Init(LED3);
 80023f4:	f7fd fee8 	bl	80001c8 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80023f8:	4638      	mov	r0, r7
  AdcHandle.Instance = ADC1;
 80023fa:	4dcc      	ldr	r5, [pc, #816]	; (800272c <main+0x390>)
  hhrtim.Instance = HRTIM1;
 80023fc:	4ccc      	ldr	r4, [pc, #816]	; (8002730 <main+0x394>)
  BSP_LED_Init(LED4);
 80023fe:	f7fd fee3 	bl	80001c8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8002402:	2003      	movs	r0, #3
 8002404:	f7fd fee0 	bl	80001c8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);   
 8002408:	4659      	mov	r1, fp
 800240a:	4658      	mov	r0, fp
 800240c:	f7fd ff4a 	bl	80002a4 <BSP_PB_Init>
  AdcHandle.Instance = ADC1;
 8002410:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  HAL_ADCEx_MultiModeConfigChannel(&AdcHandle, &MultiModeConfig);
 8002414:	a916      	add	r1, sp, #88	; 0x58
 8002416:	4628      	mov	r0, r5
  AdcHandle.Instance = ADC1;
 8002418:	602a      	str	r2, [r5, #0]
  AdcHandle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800241a:	f04f 0904 	mov.w	r9, #4
  MultiModeConfig.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800241e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  MultiModeConfig.Mode = ADC_MODE_INDEPENDENT;
 8002422:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  MultiModeConfig.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002426:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  HAL_ADCEx_MultiModeConfigChannel(&AdcHandle, &MultiModeConfig);
 800242a:	f7fe fc57 	bl	8000cdc <HAL_ADCEx_MultiModeConfigChannel>
  HAL_ADC_Init(&AdcHandle);
 800242e:	4628      	mov	r0, r5
  AdcHandle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002430:	f8c5 b004 	str.w	fp, [r5, #4]
  AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
 8002434:	f8c5 b008 	str.w	fp, [r5, #8]
  AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002438:	f8c5 b00c 	str.w	fp, [r5, #12]
  AdcHandle.Init.ScanConvMode = ENABLE;
 800243c:	612f      	str	r7, [r5, #16]
  AdcHandle.Init.LowPowerAutoWait = DISABLE;
 800243e:	f8c5 b018 	str.w	fp, [r5, #24]
  AdcHandle.Init.ContinuousConvMode = DISABLE;
 8002442:	f8c5 b01c 	str.w	fp, [r5, #28]
  AdcHandle.Init.NbrOfConversion = 1;
 8002446:	622f      	str	r7, [r5, #32]
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 8002448:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
  AdcHandle.Init.NbrOfDiscConversion = 1;
 800244c:	62af      	str	r7, [r5, #40]	; 0x28
  AdcHandle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800244e:	62ef      	str	r7, [r5, #44]	; 0x2c
  AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002450:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
  AdcHandle.Init.DMAContinuousRequests = DISABLE;
 8002454:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
  AdcHandle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002458:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
  AdcHandle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800245c:	f8c5 9014 	str.w	r9, [r5, #20]
  HAL_ADC_Init(&AdcHandle);
 8002460:	f7fe f808 	bl	8000474 <HAL_ADC_Init>
  InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 8002464:	2124      	movs	r1, #36	; 0x24
  InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002466:	2240      	movs	r2, #64	; 0x40
  InjectionConfig.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_HRTIM_TRG2;
 8002468:	9129      	str	r1, [sp, #164]	; 0xa4
  InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800246a:	f04f 0a03 	mov.w	sl, #3
  HAL_ADCEx_InjectedConfigChannel(&AdcHandle, &InjectionConfig);
 800246e:	a91f      	add	r1, sp, #124	; 0x7c
 8002470:	4628      	mov	r0, r5
  InjectionConfig.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002472:	922a      	str	r2, [sp, #168]	; 0xa8
  InjectionConfig.InjectedChannel = ADC_CHANNEL_2;
 8002474:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  InjectionConfig.InjectedRank = ADC_INJECTED_RANK_1;
 8002478:	9720      	str	r7, [sp, #128]	; 0x80
  InjectionConfig.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800247a:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
  InjectionConfig.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800247e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  InjectionConfig.InjectedOffset = 0;
 8002482:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
  InjectionConfig.InjectedNbrOfConversion = 2;
 8002486:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
  InjectionConfig.InjectedDiscontinuousConvMode = DISABLE;
 800248a:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
  InjectionConfig.AutoInjectedConv = DISABLE;
 800248e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
  InjectionConfig.QueueInjectedContext = DISABLE;
 8002492:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
  InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002496:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
  HAL_ADCEx_InjectedConfigChannel(&AdcHandle, &InjectionConfig);
 800249a:	f7fe fa25 	bl	80008e8 <HAL_ADCEx_InjectedConfigChannel>
  HAL_ADCEx_InjectedConfigChannel(&AdcHandle, &InjectionConfig);
 800249e:	a91f      	add	r1, sp, #124	; 0x7c
 80024a0:	4628      	mov	r0, r5
  InjectionConfig.InjectedChannel = ADC_CHANNEL_4;
 80024a2:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  InjectionConfig.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80024a6:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
  InjectionConfig.InjectedRank = ADC_INJECTED_RANK_2;
 80024aa:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
  HAL_ADCEx_InjectedConfigChannel(&AdcHandle, &InjectionConfig);
 80024ae:	f7fe fa1b 	bl	80008e8 <HAL_ADCEx_InjectedConfigChannel>
  HAL_ADCEx_Calibration_Start(&AdcHandle, ADC_SINGLE_ENDED);
 80024b2:	4659      	mov	r1, fp
 80024b4:	4628      	mov	r0, r5
 80024b6:	f7fe f90f 	bl	80006d8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_InjectedStart(&AdcHandle);
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7fe f982 	bl	80007c4 <HAL_ADCEx_InjectedStart>
  hhrtim.Instance = HRTIM1;
 80024c0:	4a9c      	ldr	r2, [pc, #624]	; (8002734 <main+0x398>)
 80024c2:	6022      	str	r2, [r4, #0]
  HAL_HRTIM_Init(&hhrtim);
 80024c4:	4620      	mov	r0, r4
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80024c6:	f8c4 b004 	str.w	fp, [r4, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80024ca:	f8c4 b008 	str.w	fp, [r4, #8]
  HAL_HRTIM_Init(&hhrtim);
 80024ce:	f7fe fddb 	bl	8001088 <HAL_HRTIM_Init>
  HAL_HRTIM_DLLCalibrationStart(&hhrtim, HRTIM_CALIBRATIONRATE_14);
 80024d2:	210c      	movs	r1, #12
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7fe fe57 	bl	8001188 <HAL_HRTIM_DLLCalibrationStart>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim, 100) != HAL_OK)
 80024da:	4620      	mov	r0, r4
 80024dc:	2164      	movs	r1, #100	; 0x64
 80024de:	f7fe fe79 	bl	80011d4 <HAL_HRTIM_PollForDLLCalibration>
 80024e2:	4606      	mov	r6, r0
 80024e4:	2800      	cmp	r0, #0
 80024e6:	f040 812f 	bne.w	8002748 <main+0x3ac>
  timebase_config.Period = BUCK_PWM_PERIOD; /* 400kHz switching frequency */
 80024ea:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timebase_config);
 80024ee:	4601      	mov	r1, r0
 80024f0:	aa06      	add	r2, sp, #24
  timebase_config.Period = BUCK_PWM_PERIOD; /* 400kHz switching frequency */
 80024f2:	9306      	str	r3, [sp, #24]
  HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timebase_config);
 80024f4:	4620      	mov	r0, r4
  timebase_config.Mode = HRTIM_MODE_CONTINUOUS;
 80024f6:	2308      	movs	r3, #8
  timebase_config.RepetitionCounter = 4; /* 1 ISR every 5 PWM periods */ //mine
 80024f8:	f8cd 901c 	str.w	r9, [sp, #28]
  timebase_config.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80024fc:	9608      	str	r6, [sp, #32]
  timebase_config.Mode = HRTIM_MODE_CONTINUOUS;
 80024fe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timebase_config);
 8002500:	f7fe fe8c 	bl	800121c <HAL_HRTIM_TimeBaseConfig>
  timer_config.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002504:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  timer_config.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002508:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  timer_config.InterruptRequests = HRTIM_TIM_IT_REP;
 800250c:	2310      	movs	r3, #16
  HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 800250e:	aa1f      	add	r2, sp, #124	; 0x7c
  timer_config.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002510:	9128      	str	r1, [sp, #160]	; 0xa0
  timer_config.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002512:	902b      	str	r0, [sp, #172]	; 0xac
  HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 8002514:	4631      	mov	r1, r6
  timer_config.InterruptRequests = HRTIM_TIM_IT_REP;
 8002516:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 8002518:	4620      	mov	r0, r4
  timer_config.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
  timer_config.DMARequests = HRTIM_TIM_DMA_NONE;
 800251e:	9620      	str	r6, [sp, #128]	; 0x80
  timer_config.DMASrcAddress = 0x0;
 8002520:	9621      	str	r6, [sp, #132]	; 0x84
  timer_config.DMADstAddress = 0x0;
 8002522:	9622      	str	r6, [sp, #136]	; 0x88
  timer_config.DMASize = 0x0;
 8002524:	9623      	str	r6, [sp, #140]	; 0x8c
  timer_config.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002526:	9624      	str	r6, [sp, #144]	; 0x90
  timer_config.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002528:	9625      	str	r6, [sp, #148]	; 0x94
  timer_config.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800252a:	9626      	str	r6, [sp, #152]	; 0x98
  timer_config.DACSynchro = HRTIM_DACSYNC_NONE;
 800252c:	9627      	str	r6, [sp, #156]	; 0x9c
  timer_config.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800252e:	9629      	str	r6, [sp, #164]	; 0xa4
  timer_config.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002530:	962a      	str	r6, [sp, #168]	; 0xa8
  timer_config.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002532:	9633      	str	r6, [sp, #204]	; 0xcc
  timer_config.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002534:	962c      	str	r6, [sp, #176]	; 0xb0
  timer_config.FaultEnable = HRTIM_TIMFAULTENABLE_FAULT1;
 8002536:	972d      	str	r7, [sp, #180]	; 0xb4
  timer_config.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002538:	962e      	str	r6, [sp, #184]	; 0xb8
  timer_config.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800253a:	9630      	str	r6, [sp, #192]	; 0xc0
  timer_config.UpdateTrigger= HRTIM_TIMUPDATETRIGGER_NONE;
 800253c:	9631      	str	r6, [sp, #196]	; 0xc4
  timer_config.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800253e:	9632      	str	r6, [sp, #200]	; 0xc8
  timer_config.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8002540:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &timer_config);
 8002542:	f7fe ff97 	bl	8001474 <HAL_HRTIM_WaveformTimerConfig>
  output_config_TA1_TA2.ResetSource  = HRTIM_OUTPUTRESET_TIMCMP1;
 8002546:	2108      	movs	r1, #8
  output_config_TA1_TA2.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 8002548:	f04f 0e20 	mov.w	lr, #32
  HAL_HRTIM_WaveformOutputConfig(&hhrtim,
 800254c:	463a      	mov	r2, r7
 800254e:	ab0e      	add	r3, sp, #56	; 0x38
  output_config_TA1_TA2.ResetSource  = HRTIM_OUTPUTRESET_TIMCMP1;
 8002550:	9110      	str	r1, [sp, #64]	; 0x40
  HAL_HRTIM_WaveformOutputConfig(&hhrtim,
 8002552:	4620      	mov	r0, r4
 8002554:	4631      	mov	r1, r6
  output_config_TA1_TA2.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 8002556:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  output_config_TA1_TA2.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800255a:	960e      	str	r6, [sp, #56]	; 0x38
  output_config_TA1_TA2.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800255c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  output_config_TA1_TA2.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002560:	9611      	str	r6, [sp, #68]	; 0x44
  compare_config.CompareValue = BUCK_PWM_PERIOD/20;  /* 5% duty cycle */
 8002562:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
  output_config_TA1_TA2.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002566:	9612      	str	r6, [sp, #72]	; 0x48
  output_config_TA1_TA2.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002568:	9614      	str	r6, [sp, #80]	; 0x50
  output_config_TA1_TA2.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800256a:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_HRTIM_WaveformOutputConfig(&hhrtim,
 800256c:	f7ff f996 	bl	800189c <HAL_HRTIM_WaveformOutputConfig>
  HAL_HRTIM_WaveformOutputConfig(&hhrtim,
 8002570:	4642      	mov	r2, r8
 8002572:	4631      	mov	r1, r6
 8002574:	ab0e      	add	r3, sp, #56	; 0x38
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff f990 	bl	800189c <HAL_HRTIM_WaveformOutputConfig>
  compare_config.CompareValue = BUCK_PWM_PERIOD/20;  /* 5% duty cycle */
 800257c:	f240 3399 	movw	r3, #921	; 0x399
 8002580:	f849 3dc4 	str.w	r3, [r9, #-196]!
  HAL_HRTIM_WaveformCompareConfig(&hhrtim,
 8002584:	463a      	mov	r2, r7
 8002586:	464b      	mov	r3, r9
 8002588:	4631      	mov	r1, r6
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff f8ee 	bl	800176c <HAL_HRTIM_WaveformCompareConfig>
  HRTIM_TIM_DeadTimeConfig.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 8002590:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  HRTIM_TIM_DeadTimeConfig.FallingValue = DT_FALLING;
 8002594:	23e6      	movs	r3, #230	; 0xe6
  HRTIM_TIM_DeadTimeConfig.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 8002596:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  HAL_HRTIM_DeadTimeConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &HRTIM_TIM_DeadTimeConfig);
 800259a:	4631      	mov	r1, r6
 800259c:	aa16      	add	r2, sp, #88	; 0x58
 800259e:	4620      	mov	r0, r4
  HRTIM_TIM_DeadTimeConfig.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 80025a0:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
  HRTIM_TIM_DeadTimeConfig.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 80025a4:	961d      	str	r6, [sp, #116]	; 0x74
  HRTIM_TIM_DeadTimeConfig.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 80025a6:	961c      	str	r6, [sp, #112]	; 0x70
  HRTIM_TIM_DeadTimeConfig.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 80025a8:	9616      	str	r6, [sp, #88]	; 0x58
  HRTIM_TIM_DeadTimeConfig.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 80025aa:	9619      	str	r6, [sp, #100]	; 0x64
  HRTIM_TIM_DeadTimeConfig.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 80025ac:	9618      	str	r6, [sp, #96]	; 0x60
  HRTIM_TIM_DeadTimeConfig.FallingValue = DT_FALLING;
 80025ae:	931b      	str	r3, [sp, #108]	; 0x6c
  HRTIM_TIM_DeadTimeConfig.RisingValue = DT_RISING;
 80025b0:	9317      	str	r3, [sp, #92]	; 0x5c
  HRTIM_TIM_DeadTimeConfig.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 80025b2:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  HAL_HRTIM_DeadTimeConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &HRTIM_TIM_DeadTimeConfig);
 80025b6:	f7ff f8a1 	bl	80016fc <HAL_HRTIM_DeadTimeConfig>
  compare_config.CompareValue = BUCK_PWM_PERIOD/10; /* Samples in middle of ON time */
 80025ba:	f240 7e33 	movw	lr, #1843	; 0x733
  HAL_HRTIM_WaveformCompareConfig(&hhrtim,
 80025be:	464b      	mov	r3, r9
 80025c0:	4642      	mov	r2, r8
 80025c2:	4631      	mov	r1, r6
 80025c4:	4620      	mov	r0, r4
  compare_config.CompareValue = BUCK_PWM_PERIOD/10; /* Samples in middle of ON time */
 80025c6:	f8cd e00c 	str.w	lr, [sp, #12]
  compare_config.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80025ca:	9604      	str	r6, [sp, #16]
  compare_config.AutoDelayedTimeout = 0;
 80025cc:	9605      	str	r6, [sp, #20]
  HAL_HRTIM_WaveformCompareConfig(&hhrtim,
 80025ce:	f7ff f8cd 	bl	800176c <HAL_HRTIM_WaveformCompareConfig>
  adc_trigger_config.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80025d2:	aa34      	add	r2, sp, #208	; 0xd0
 80025d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_HRTIM_ADCTriggerConfig(&hhrtim,
 80025d8:	4641      	mov	r1, r8
  adc_trigger_config.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80025da:	f842 3dcc 	str.w	r3, [r2, #-204]!
  HAL_HRTIM_ADCTriggerConfig(&hhrtim,
 80025de:	4620      	mov	r0, r4
  adc_trigger_config.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP2;
 80025e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e4:	9302      	str	r3, [sp, #8]
  HAL_HRTIM_ADCTriggerConfig(&hhrtim,
 80025e6:	f7fe fef5 	bl	80013d4 <HAL_HRTIM_ADCTriggerConfig>
  fault_config.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 80025ea:	aa34      	add	r2, sp, #208	; 0xd0
  HAL_HRTIM_FaultConfig(&hhrtim,
 80025ec:	4639      	mov	r1, r7
  fault_config.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 80025ee:	f842 6da8 	str.w	r6, [r2, #-168]!
  HAL_HRTIM_FaultConfig(&hhrtim,
 80025f2:	4620      	mov	r0, r4
  fault_config.Filter = HRTIM_FAULTFILTER_NONE;
 80025f4:	960c      	str	r6, [sp, #48]	; 0x30
  fault_config.Lock = HRTIM_FAULTLOCK_READWRITE;
 80025f6:	960d      	str	r6, [sp, #52]	; 0x34
  fault_config.Polarity = HRTIM_FAULTPOLARITY_LOW;
 80025f8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_HRTIM_FaultConfig(&hhrtim,
 80025fa:	f7fe fe47 	bl	800128c <HAL_HRTIM_FaultConfig>
  HAL_HRTIM_FaultModeCtl(&hhrtim,
 80025fe:	463a      	mov	r2, r7
 8002600:	4639      	mov	r1, r7
 8002602:	4620      	mov	r0, r4
 8002604:	f7fe feb8 	bl	8001378 <HAL_HRTIM_FaultModeCtl>
  HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 8002608:	4651      	mov	r1, sl
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff f9c0 	bl	8001990 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart_IT(&hhrtim, HRTIM_TIMERID_TIMER_A);
 8002610:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff f9d7 	bl	80019c8 <HAL_HRTIM_WaveformCounterStart_IT>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <main+0x39c>)
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_8; 
 8002630:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002634:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	a91f      	add	r1, sp, #124	; 0x7c
 8002638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8; 
 800263c:	921f      	str	r2, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;;  
 800263e:	9621      	str	r6, [sp, #132]	; 0x84
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	9a16      	ldr	r2, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002642:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;;  
 8002644:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	f7fe fc28 	bl	8000e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800264c:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	a91f      	add	r1, sp, #124	; 0x7c
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002656:	931f      	str	r3, [sp, #124]	; 0x7c
    Vin = (HAL_ADCEx_InjectedGetValue(&AdcHandle, ADC_INJECTED_RANK_1) * ADC_VREF)/0x1000;
 8002658:	46a8      	mov	r8, r5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f7fe fc1f 	bl	8000e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800265e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	a91f      	add	r1, sp, #124	; 0x7c
 8002664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	9720      	str	r7, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;;  
 800266a:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800266c:	951f      	str	r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;;  
 800266e:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f7fe fc13 	bl	8000e9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002676:	463a      	mov	r2, r7
 8002678:	4629      	mov	r1, r5
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f7fe fcfd 	bl	800107c <HAL_GPIO_WritePin>
 8002682:	4f2e      	ldr	r7, [pc, #184]	; (800273c <main+0x3a0>)
 8002684:	4e2e      	ldr	r6, [pc, #184]	; (8002740 <main+0x3a4>)
    Vin = (497 * Vin )/100;
 8002686:	4d2f      	ldr	r5, [pc, #188]	; (8002744 <main+0x3a8>)
          HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 8002688:	46a1      	mov	r9, r4
    while(__HAL_HRTIM_GET_FLAG(&hhrtim, HRTIM_FLAG_FLT1) == SET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8002690:	07db      	lsls	r3, r3, #31
    BSP_LED_On(LED6);
 8002692:	f04f 0003 	mov.w	r0, #3
    Vin = (HAL_ADCEx_InjectedGetValue(&AdcHandle, ADC_INJECTED_RANK_1) * ADC_VREF)/0x1000;
 8002696:	f640 4ae4 	movw	sl, #3300	; 0xce4
    while(__HAL_HRTIM_GET_FLAG(&hhrtim, HRTIM_FLAG_FLT1) == SET)
 800269a:	d42e      	bmi.n	80026fa <main+0x35e>
    BSP_LED_On(LED6);
 800269c:	f7fd fde6 	bl	800026c <BSP_LED_On>
    HAL_Delay(100);
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	f7fd fed5 	bl	8000450 <HAL_Delay>
    BSP_LED_Off(LED6);
 80026a6:	2003      	movs	r0, #3
 80026a8:	f7fd fdee 	bl	8000288 <BSP_LED_Off>
    HAL_Delay(400);
 80026ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80026b0:	f7fd fece 	bl	8000450 <HAL_Delay>
    Vin = (HAL_ADCEx_InjectedGetValue(&AdcHandle, ADC_INJECTED_RANK_1) * ADC_VREF)/0x1000;
 80026b4:	2101      	movs	r1, #1
 80026b6:	4640      	mov	r0, r8
 80026b8:	f7fe f900 	bl	80008bc <HAL_ADCEx_InjectedGetValue>
 80026bc:	fb0a f000 	mul.w	r0, sl, r0
 80026c0:	0b00      	lsrs	r0, r0, #12
 80026c2:	6038      	str	r0, [r7, #0]
    Vin = (497 * Vin )/100;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80026ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80026ce:	fba5 2303 	umull	r2, r3, r5, r3
 80026d2:	095b      	lsrs	r3, r3, #5
    Vout = (HAL_ADCEx_InjectedGetValue(&AdcHandle, ADC_INJECTED_RANK_2) * ADC_VREF)/0x1000;
 80026d4:	2102      	movs	r1, #2
 80026d6:	4640      	mov	r0, r8
    Vin = (497 * Vin )/100;
 80026d8:	603b      	str	r3, [r7, #0]
    Vout = (HAL_ADCEx_InjectedGetValue(&AdcHandle, ADC_INJECTED_RANK_2) * ADC_VREF)/0x1000;
 80026da:	f7fe f8ef 	bl	80008bc <HAL_ADCEx_InjectedGetValue>
 80026de:	fb0a f000 	mul.w	r0, sl, r0
 80026e2:	0b00      	lsrs	r0, r0, #12
 80026e4:	6030      	str	r0, [r6, #0]
    Vout = (503 * Vout)/100;
 80026e6:	6833      	ldr	r3, [r6, #0]
 80026e8:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 80026ec:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80026f0:	fba5 2303 	umull	r2, r3, r5, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	6033      	str	r3, [r6, #0]
    while(__HAL_HRTIM_GET_FLAG(&hhrtim, HRTIM_FLAG_FLT1) == SET)
 80026f8:	e7c7      	b.n	800268a <main+0x2ee>
      BSP_LED_On(LED3);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fd fdb6 	bl	800026c <BSP_LED_On>
      HAL_Delay(20);
 8002700:	2014      	movs	r0, #20
 8002702:	f7fd fea5 	bl	8000450 <HAL_Delay>
      BSP_LED_Off(LED3);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fd fdbe 	bl	8000288 <BSP_LED_Off>
      HAL_Delay(80);
 800270c:	2050      	movs	r0, #80	; 0x50
 800270e:	f7fd fe9f 	bl	8000450 <HAL_Delay>
      if((BSP_PB_GetState(BUTTON_USER) == SET))
 8002712:	2000      	movs	r0, #0
 8002714:	f7fd fe10 	bl	8000338 <BSP_PB_GetState>
 8002718:	2801      	cmp	r0, #1
 800271a:	d1b6      	bne.n	800268a <main+0x2ee>
          __HAL_HRTIM_CLEAR_IT(&hhrtim, HRTIM_IT_FLT1);
 800271c:	6823      	ldr	r3, [r4, #0]
          HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 800271e:	2103      	movs	r1, #3
          __HAL_HRTIM_CLEAR_IT(&hhrtim, HRTIM_IT_FLT1);
 8002720:	f8c3 038c 	str.w	r0, [r3, #908]	; 0x38c
          HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 8002724:	4648      	mov	r0, r9
 8002726:	f7ff f933 	bl	8001990 <HAL_HRTIM_WaveformOutputStart>
 800272a:	e7ae      	b.n	800268a <main+0x2ee>
 800272c:	20000044 	.word	0x20000044
 8002730:	20000098 	.word	0x20000098
 8002734:	40017400 	.word	0x40017400
 8002738:	40021000 	.word	0x40021000
 800273c:	20000174 	.word	0x20000174
 8002740:	20000040 	.word	0x20000040
 8002744:	51eb851f 	.word	0x51eb851f
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED3 (RED) on */
  BSP_LED_On(LED3);
 8002748:	4658      	mov	r0, fp
 800274a:	f7fd fd8f 	bl	800026c <BSP_LED_On>
 800274e:	e7fe      	b.n	800274e <main+0x3b2>
 8002750:	4620      	mov	r0, r4
 8002752:	f7fd fd8b 	bl	800026c <BSP_LED_On>
 8002756:	e7fe      	b.n	8002756 <main+0x3ba>
 8002758:	4628      	mov	r0, r5
 800275a:	f7fd fd87 	bl	800026c <BSP_LED_On>
 800275e:	e7fe      	b.n	800275e <main+0x3c2>

08002760 <HAL_HRTIM_MspInit>:
* @brief  HAL_HRTIM_MspInit
* @param  None
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef * hhrtim)
{
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
    RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	4c1b      	ldr	r4, [pc, #108]	; (80027d0 <HAL_HRTIM_MspInit+0x70>)
 8002764:	6963      	ldr	r3, [r4, #20]
 8002766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276a:	6163      	str	r3, [r4, #20]
 800276c:	6963      	ldr	r3, [r4, #20]
{
 800276e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	9300      	str	r3, [sp, #0]

  /* Configure HRTIM input: FAULT1 (PA12) */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;;  
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;;  
 8002776:	2203      	movs	r2, #3
  GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800277a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800277e:	230d      	movs	r3, #13
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_PULLUP;;  
 8002782:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	f8dd e000 	ldr.w	lr, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;;  
 800278c:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800278e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002790:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;;  
 8002794:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f7fe fb81 	bl	8000e9c <HAL_GPIO_Init>
  
    /* Use the PLLx2 clock for HRTIM */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 800279a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800279e:	a807      	add	r0, sp, #28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80027a0:	9307      	str	r3, [sp, #28]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 80027a2:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80027a4:	f7ff fd0e 	bl	80021c4 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Enable HRTIM clock*/
  __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027a8:	69a3      	ldr	r3, [r4, #24]
 80027aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ae:	61a3      	str	r3, [r4, #24]
 80027b0:	69a3      	ldr	r3, [r4, #24]

  /* Configure and enable HRTIM TIMERA interrupt channel in NVIC */
  HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
  __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80027ba:	4611      	mov	r1, r2
 80027bc:	2044      	movs	r0, #68	; 0x44
  __HAL_RCC_HRTIM1_CLK_ENABLE();
 80027be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80027c0:	f7fe fb10 	bl	8000de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80027c4:	2044      	movs	r0, #68	; 0x44
 80027c6:	f7fe fb43 	bl	8000e50 <HAL_NVIC_EnableIRQ>

}
 80027ca:	b00f      	add	sp, #60	; 0x3c
 80027cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_ADC_MspInit>:
{
  GPIO_InitTypeDef          GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock ****************************************/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_ADC_MspInit+0x64>)
{
 80027d6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027de:	615a      	str	r2, [r3, #20]
 80027e0:	695a      	ldr	r2, [r3, #20]
{
 80027e2:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80027e8:	9201      	str	r2, [sp, #4]
 80027ea:	9a01      	ldr	r2, [sp, #4]

  /* ADC2 Periph clock enable */
  __HAL_RCC_ADC12_CLK_ENABLE();
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027f2:	615a      	str	r2, [r3, #20]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80027fa:	9202      	str	r2, [sp, #8]
 80027fc:	9a02      	ldr	r2, [sp, #8]
  /* ADC2 dedicated asynchronous clock enable */
  __HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* Configure PA1 and PA3 (ADC1 Channel2 and 4) as analog inputs */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800280c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280e:	2503      	movs	r5, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002816:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f7fe fb3e 	bl	8000e9c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002820:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	a903      	add	r1, sp, #12
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002828:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800282c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f7fe fb35 	bl	8000e9c <HAL_GPIO_Init>
  
  /*##-3- Configure the NVIC #################################################*/
  /* (ADC interruptions not used in this exemple) */
}
 8002832:	b009      	add	sp, #36	; 0x24
 8002834:	bd30      	pop	{r4, r5, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <NMI_Handler>:
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002840:	e7fe      	b.n	8002840 <HardFault_Handler>
 8002842:	bf00      	nop

08002844 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002844:	e7fe      	b.n	8002844 <MemManage_Handler>
 8002846:	bf00      	nop

08002848 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002848:	e7fe      	b.n	8002848 <BusFault_Handler>
 800284a:	bf00      	nop

0800284c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800284c:	e7fe      	b.n	800284c <UsageFault_Handler>
 800284e:	bf00      	nop

08002850 <SVC_Handler>:
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <DebugMon_Handler>:
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800285c:	f7fd bde6 	b.w	800042c <HAL_IncTick>

08002860 <HRTIM1_TIMA_IRQHandler>:
  * @brief  This function handles HRTIM1 TIMA interrupt request.
  * @param  None
  * @retval None
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002860:	b508      	push	{r3, lr}
  uint32_t CurrentDuty;

  /* For interrupt duration monitoring purpose */
  BSP_LED_On(LED4);
 8002862:	2001      	movs	r0, #1
 8002864:	f7fd fd02 	bl	800026c <BSP_LED_On>
  
  /* Clear interrupt flag */
  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].TIMxICR = HRTIM_TIMDIER_REPIE;
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HRTIM1_TIMA_IRQHandler+0x4c>)
 800286a:	2210      	movs	r2, #16
 800286c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get current duty cycle value */
  CurrentDuty = HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR;
 8002870:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c

  /* Increase the compare value up to 66% duty cycle and re-start from 33% */
  if (CurrentDuty < 2*(BUCK_PWM_PERIOD/3))
 8002874:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002878:	d30c      	bcc.n	8002894 <HRTIM1_TIMA_IRQHandler+0x34>
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = CurrentDuty; /* Duty cycle update */
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = CurrentDuty/2; /* ADC trigger position update */
  }
  else  /* Re-start ramp from 33% duty cycle */
  {
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = BUCK_PWM_PERIOD/3;
 800287a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = BUCK_PWM_PERIOD/6;
 800287e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = BUCK_PWM_PERIOD/3;
 8002882:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  }

  BSP_LED_Off(LED4);
 8002886:	2001      	movs	r0, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = BUCK_PWM_PERIOD/6;
 8002888:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800288c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LED_Off(LED4);
 8002890:	f7fd bcfa 	b.w	8000288 <BSP_LED_Off>
    CurrentDuty++;
 8002894:	3201      	adds	r2, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = CurrentDuty/2; /* ADC trigger position update */
 8002896:	0851      	lsrs	r1, r2, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = CurrentDuty; /* Duty cycle update */
 8002898:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  BSP_LED_Off(LED4);
 800289c:	2001      	movs	r0, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = CurrentDuty/2; /* ADC trigger position update */
 800289e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
}
 80028a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LED_Off(LED4);
 80028a6:	f7fd bcef 	b.w	8000288 <BSP_LED_Off>
 80028aa:	bf00      	nop
 80028ac:	40017400 	.word	0x40017400

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	4e0d      	ldr	r6, [pc, #52]	; (80028e8 <__libc_init_array+0x38>)
 80028b4:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b6:	1ba4      	subs	r4, r4, r6
 80028b8:	10a4      	asrs	r4, r4, #2
 80028ba:	2500      	movs	r5, #0
 80028bc:	42a5      	cmp	r5, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	4e0b      	ldr	r6, [pc, #44]	; (80028f0 <__libc_init_array+0x40>)
 80028c2:	4c0c      	ldr	r4, [pc, #48]	; (80028f4 <__libc_init_array+0x44>)
 80028c4:	f000 f818 	bl	80028f8 <_init>
 80028c8:	1ba4      	subs	r4, r4, r6
 80028ca:	10a4      	asrs	r4, r4, #2
 80028cc:	2500      	movs	r5, #0
 80028ce:	42a5      	cmp	r5, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d8:	4798      	blx	r3
 80028da:	3501      	adds	r5, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e2:	4798      	blx	r3
 80028e4:	3501      	adds	r5, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08002958 	.word	0x08002958
 80028ec:	08002958 	.word	0x08002958
 80028f0:	08002958 	.word	0x08002958
 80028f4:	0800295c 	.word	0x0800295c

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
